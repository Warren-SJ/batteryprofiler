
PWMOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080050d4  080050d4  000060d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f0  080051f0  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  080051f0  080051f0  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051f0  080051f0  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000061f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080051f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000070  08005268  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005268  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009966  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b87  00000000  00000000  000109ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00012588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008dd  00000000  00000000  00013118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188fe  00000000  00000000  000139f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c71b  00000000  00000000  0002c2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb2e  00000000  00000000  00038a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c753c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b70  00000000  00000000  000c7580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e3  00000000  00000000  000cb0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080050bc 	.word	0x080050bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080050bc 	.word	0x080050bc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <PID_Compute>:
	pid->prev_error = 0;
	pid->integral = 0;
	pid->dt = dt;
}

float PID_Compute(PID_HandleTypeDef *pid, float setpoint, float measured) {
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	float error = setpoint - measured;
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	68b8      	ldr	r0, [r7, #8]
 8000f84:	f7ff fd06 	bl	8000994 <__aeabi_fsub>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	61fb      	str	r3, [r7, #28]
	pid->integral += error * pid->dt;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	691c      	ldr	r4, [r3, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	69f9      	ldr	r1, [r7, #28]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fe06 	bl	8000ba8 <__aeabi_fmul>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff fcf9 	bl	8000998 <__addsf3>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	611a      	str	r2, [r3, #16]
	float derivative = (error - pid->prev_error) / pid->dt;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	69f8      	ldr	r0, [r7, #28]
 8000fb6:	f7ff fced 	bl	8000994 <__aeabi_fsub>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	f7ff fea3 	bl	8000d10 <__aeabi_fdiv>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	61bb      	str	r3, [r7, #24]
	pid->prev_error = error;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	60da      	str	r2, [r3, #12]

	float output = (pid->kp * error) + (pid->ki * pid->integral)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	69f9      	ldr	r1, [r7, #28]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fde4 	bl	8000ba8 <__aeabi_fmul>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4610      	mov	r0, r2
 8000ff0:	f7ff fdda 	bl	8000ba8 <__aeabi_fmul>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff fccd 	bl	8000998 <__addsf3>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461c      	mov	r4, r3
			+ (pid->kd * derivative);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fdcd 	bl	8000ba8 <__aeabi_fmul>
 800100e:	4603      	mov	r3, r0
	float output = (pid->kp * error) + (pid->ki * pid->integral)
 8001010:	4619      	mov	r1, r3
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff fcc0 	bl	8000998 <__addsf3>
 8001018:	4603      	mov	r3, r0
 800101a:	617b      	str	r3, [r7, #20]
	return output;
 800101c:	697b      	ldr	r3, [r7, #20]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
	...

08001028 <Convert_ADCValue_To_Temperature>:

float Convert_ADCValue_To_Temperature(uint32_t adcValue) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	// Convert the ADC value to temperature (example for LM35 sensor)
	float voltage = (adcValue / 4095.0) * 3.3;
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff f9cf 	bl	80003d4 <__aeabi_ui2d>
 8001036:	a310      	add	r3, pc, #64	@ (adr r3, 8001078 <Convert_ADCValue_To_Temperature+0x50>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fb6e 	bl	800071c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	a30d      	add	r3, pc, #52	@ (adr r3, 8001080 <Convert_ADCValue_To_Temperature+0x58>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fa3b 	bl	80004c8 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fc47 	bl	80008ec <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	60fb      	str	r3, [r7, #12]
	float temperature = voltage * 100.0;
 8001062:	4909      	ldr	r1, [pc, #36]	@ (8001088 <Convert_ADCValue_To_Temperature+0x60>)
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fd9f 	bl	8000ba8 <__aeabi_fmul>
 800106a:	4603      	mov	r3, r0
 800106c:	60bb      	str	r3, [r7, #8]
	return temperature;
 800106e:	68bb      	ldr	r3, [r7, #8]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	00000000 	.word	0x00000000
 800107c:	40affe00 	.word	0x40affe00
 8001080:	66666666 	.word	0x66666666
 8001084:	400a6666 	.word	0x400a6666
 8001088:	42c80000 	.word	0x42c80000

0800108c <InitMovingAverageArray>:
    float array[10];
    uint8_t index;
} MovingAverageArray;

void InitMovingAverageArray(MovingAverageArray *maArray)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < size; i++) {
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e008      	b.n	80010ac <InitMovingAverageArray+0x20>
        maArray->array[i] = 0.0f;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f04f 0100 	mov.w	r1, #0
 80010a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < size; i++) {
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <InitMovingAverageArray+0x3c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3f1      	bcc.n	800109a <InitMovingAverageArray+0xe>
    }
    maArray->index = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <UpdateMovingAverageArray>:

void UpdateMovingAverageArray(MovingAverageArray *maArray, float newValue)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    maArray->array[maArray->index] = newValue;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    maArray->index = (maArray->index + 1) % size;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <UpdateMovingAverageArray+0x44>)
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80010f6:	fb01 f202 	mul.w	r2, r1, r2
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <ComputeMovingAverage>:

float ComputeMovingAverage(MovingAverageArray *maArray)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    float sum = 0;
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	72fb      	strb	r3, [r7, #11]
 8001126:	e00c      	b.n	8001142 <ComputeMovingAverage+0x2e>
        sum += maArray->array[i];
 8001128:	7afa      	ldrb	r2, [r7, #11]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	4619      	mov	r1, r3
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fc30 	bl	8000998 <__addsf3>
 8001138:	4603      	mov	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 800113c:	7afb      	ldrb	r3, [r7, #11]
 800113e:	3301      	adds	r3, #1
 8001140:	72fb      	strb	r3, [r7, #11]
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <ComputeMovingAverage+0x58>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	7afa      	ldrb	r2, [r7, #11]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3ed      	bcc.n	8001128 <ComputeMovingAverage+0x14>
    }
    return sum / size;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <ComputeMovingAverage+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fcd5 	bl	8000b00 <__aeabi_i2f>
 8001156:	4603      	mov	r3, r0
 8001158:	4619      	mov	r1, r3
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f7ff fdd8 	bl	8000d10 <__aeabi_fdiv>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000

08001170 <GetVoltage>:
// Below functions will need to be implemented. For now, we just return average readings
float GetVoltage(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    return (float)(rand() % 100);
 8001174:	f002 ffba 	bl	80040ec <rand>
 8001178:	4602      	mov	r2, r0
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <GetVoltage+0x2c>)
 800117c:	fb83 1302 	smull	r1, r3, r3, r2
 8001180:	1159      	asrs	r1, r3, #5
 8001182:	17d3      	asrs	r3, r2, #31
 8001184:	1acb      	subs	r3, r1, r3
 8001186:	2164      	movs	r1, #100	@ 0x64
 8001188:	fb01 f303 	mul.w	r3, r1, r3
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fcb6 	bl	8000b00 <__aeabi_i2f>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	51eb851f 	.word	0x51eb851f

080011a0 <GetCurrent>:

float GetCurrent(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    return (float)(rand() % 100);
 80011a4:	f002 ffa2 	bl	80040ec <rand>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <GetCurrent+0x2c>)
 80011ac:	fb83 1302 	smull	r1, r3, r3, r2
 80011b0:	1159      	asrs	r1, r3, #5
 80011b2:	17d3      	asrs	r3, r2, #31
 80011b4:	1acb      	subs	r3, r1, r3
 80011b6:	2164      	movs	r1, #100	@ 0x64
 80011b8:	fb01 f303 	mul.w	r3, r1, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc9e 	bl	8000b00 <__aeabi_i2f>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	51eb851f 	.word	0x51eb851f

080011d0 <GetPower>:

float GetPower(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    return (float)(rand() % 100);
 80011d4:	f002 ff8a 	bl	80040ec <rand>
 80011d8:	4602      	mov	r2, r0
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <GetPower+0x2c>)
 80011dc:	fb83 1302 	smull	r1, r3, r3, r2
 80011e0:	1159      	asrs	r1, r3, #5
 80011e2:	17d3      	asrs	r3, r2, #31
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	2164      	movs	r1, #100	@ 0x64
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fc86 	bl	8000b00 <__aeabi_i2f>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	51eb851f 	.word	0x51eb851f

08001200 <GetEnergy>:

float GetEnergy(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    return (float)(rand() % 100);
 8001204:	f002 ff72 	bl	80040ec <rand>
 8001208:	4602      	mov	r2, r0
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <GetEnergy+0x2c>)
 800120c:	fb83 1302 	smull	r1, r3, r3, r2
 8001210:	1159      	asrs	r1, r3, #5
 8001212:	17d3      	asrs	r3, r2, #31
 8001214:	1acb      	subs	r3, r1, r3
 8001216:	2164      	movs	r1, #100	@ 0x64
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fc6e 	bl	8000b00 <__aeabi_i2f>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	51eb851f 	.word	0x51eb851f

08001230 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b08d      	sub	sp, #52	@ 0x34
 8001234:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001236:	f000 fc85 	bl	8001b44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800123a:	f000 f891 	bl	8001360 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800123e:	f000 fa2d 	bl	800169c <MX_GPIO_Init>
	MX_TIM1_Init();
 8001242:	f000 f91b 	bl	800147c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001246:	f000 f9cb 	bl	80015e0 <MX_TIM2_Init>
	MX_ADC1_Init();
 800124a:	f000 f8d9 	bl	8001400 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	InitMovingAverageArray(&voltagearray);
 800124e:	483b      	ldr	r0, [pc, #236]	@ (800133c <main+0x10c>)
 8001250:	f7ff ff1c 	bl	800108c <InitMovingAverageArray>
	InitMovingAverageArray(&currentarray);
 8001254:	483a      	ldr	r0, [pc, #232]	@ (8001340 <main+0x110>)
 8001256:	f7ff ff19 	bl	800108c <InitMovingAverageArray>
	InitMovingAverageArray(&powerarray);
 800125a:	483a      	ldr	r0, [pc, #232]	@ (8001344 <main+0x114>)
 800125c:	f7ff ff16 	bl	800108c <InitMovingAverageArray>
	InitMovingAverageArray(&energyarray);
 8001260:	4839      	ldr	r0, [pc, #228]	@ (8001348 <main+0x118>)
 8001262:	f7ff ff13 	bl	800108c <InitMovingAverageArray>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001266:	f04f 31ff 	mov.w	r1, #4294967295
 800126a:	4838      	ldr	r0, [pc, #224]	@ (800134c <main+0x11c>)
 800126c:	f000 fdc8 	bl	8001e00 <HAL_ADC_PollForConversion>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d131      	bne.n	80012da <main+0xaa>
			uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001276:	4835      	ldr	r0, [pc, #212]	@ (800134c <main+0x11c>)
 8001278:	f000 fec8 	bl	800200c <HAL_ADC_GetValue>
 800127c:	62b8      	str	r0, [r7, #40]	@ 0x28
			float temperature = Convert_ADCValue_To_Temperature(adcValue);
 800127e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001280:	f7ff fed2 	bl	8001028 <Convert_ADCValue_To_Temperature>
 8001284:	6278      	str	r0, [r7, #36]	@ 0x24

			float control = PID_Compute(&hpid, setpoint, temperature);
 8001286:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <main+0x120>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	4831      	ldr	r0, [pc, #196]	@ (8001354 <main+0x124>)
 8001290:	f7ff fe70 	bl	8000f74 <PID_Compute>
 8001294:	62f8      	str	r0, [r7, #44]	@ 0x2c

			// Ensure control value is within PWM range (0 to Period)
			if (control < 0)
 8001296:	f04f 0100 	mov.w	r1, #0
 800129a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800129c:	f7ff fe22 	bl	8000ee4 <__aeabi_fcmplt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <main+0x7c>
				control = 0;
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (control > 999)
 80012ac:	492a      	ldr	r1, [pc, #168]	@ (8001358 <main+0x128>)
 80012ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012b0:	f7ff fe36 	bl	8000f20 <__aeabi_fcmpgt>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <main+0x8e>
				control = 999;
 80012ba:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <main+0x128>)
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, control);
 80012be:	4b27      	ldr	r3, [pc, #156]	@ (800135c <main+0x12c>)
 80012c0:	681c      	ldr	r4, [r3, #0]
 80012c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012c4:	f7ff fe36 	bl	8000f34 <__aeabi_f2uiz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	6363      	str	r3, [r4, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, control);
 80012cc:	4b23      	ldr	r3, [pc, #140]	@ (800135c <main+0x12c>)
 80012ce:	681c      	ldr	r4, [r3, #0]
 80012d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012d2:	f7ff fe2f 	bl	8000f34 <__aeabi_f2uiz>
 80012d6:	4603      	mov	r3, r0
 80012d8:	63a3      	str	r3, [r4, #56]	@ 0x38
		}

		float voltage = GetVoltage();
 80012da:	f7ff ff49 	bl	8001170 <GetVoltage>
 80012de:	6238      	str	r0, [r7, #32]
		float current = GetCurrent();
 80012e0:	f7ff ff5e 	bl	80011a0 <GetCurrent>
 80012e4:	61f8      	str	r0, [r7, #28]
		float power = GetPower();
 80012e6:	f7ff ff73 	bl	80011d0 <GetPower>
 80012ea:	61b8      	str	r0, [r7, #24]
		float energy = GetEnergy();
 80012ec:	f7ff ff88 	bl	8001200 <GetEnergy>
 80012f0:	6178      	str	r0, [r7, #20]

		// Update arrays with new readings
		UpdateMovingAverageArray(&voltagearray, voltage);
 80012f2:	6a39      	ldr	r1, [r7, #32]
 80012f4:	4811      	ldr	r0, [pc, #68]	@ (800133c <main+0x10c>)
 80012f6:	f7ff fee9 	bl	80010cc <UpdateMovingAverageArray>
		UpdateMovingAverageArray(&currentarray, current);
 80012fa:	69f9      	ldr	r1, [r7, #28]
 80012fc:	4810      	ldr	r0, [pc, #64]	@ (8001340 <main+0x110>)
 80012fe:	f7ff fee5 	bl	80010cc <UpdateMovingAverageArray>
		UpdateMovingAverageArray(&powerarray, power);
 8001302:	69b9      	ldr	r1, [r7, #24]
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <main+0x114>)
 8001306:	f7ff fee1 	bl	80010cc <UpdateMovingAverageArray>
		UpdateMovingAverageArray(&energyarray, energy);
 800130a:	6979      	ldr	r1, [r7, #20]
 800130c:	480e      	ldr	r0, [pc, #56]	@ (8001348 <main+0x118>)
 800130e:	f7ff fedd 	bl	80010cc <UpdateMovingAverageArray>

		// Compute moving averages
		float avg1 = ComputeMovingAverage(&voltagearray);
 8001312:	480a      	ldr	r0, [pc, #40]	@ (800133c <main+0x10c>)
 8001314:	f7ff fefe 	bl	8001114 <ComputeMovingAverage>
 8001318:	6138      	str	r0, [r7, #16]
		float avg2 = ComputeMovingAverage(&currentarray);
 800131a:	4809      	ldr	r0, [pc, #36]	@ (8001340 <main+0x110>)
 800131c:	f7ff fefa 	bl	8001114 <ComputeMovingAverage>
 8001320:	60f8      	str	r0, [r7, #12]
		float avg3 = ComputeMovingAverage(&powerarray);
 8001322:	4808      	ldr	r0, [pc, #32]	@ (8001344 <main+0x114>)
 8001324:	f7ff fef6 	bl	8001114 <ComputeMovingAverage>
 8001328:	60b8      	str	r0, [r7, #8]
		float avg4 = ComputeMovingAverage(&energyarray);
 800132a:	4807      	ldr	r0, [pc, #28]	@ (8001348 <main+0x118>)
 800132c:	f7ff fef2 	bl	8001114 <ComputeMovingAverage>
 8001330:	6078      	str	r0, [r7, #4]

		// Use the moving averages (for demonstration, just print them)

		HAL_Delay(1000);  // Delay for demonstration purposes
 8001332:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001336:	f000 fc67 	bl	8001c08 <HAL_Delay>
	while (1) {
 800133a:	e794      	b.n	8001266 <main+0x36>
 800133c:	20000164 	.word	0x20000164
 8001340:	20000190 	.word	0x20000190
 8001344:	200001bc 	.word	0x200001bc
 8001348:	200001e8 	.word	0x200001e8
 800134c:	2000008c 	.word	0x2000008c
 8001350:	20000004 	.word	0x20000004
 8001354:	2000014c 	.word	0x2000014c
 8001358:	4479c000 	.word	0x4479c000
 800135c:	200000bc 	.word	0x200000bc

08001360 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void SystemClock_Config(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	@ 0x50
 8001364:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001366:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800136a:	2228      	movs	r2, #40	@ 0x28
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f002 ffff 	bl	8004372 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001398:	2310      	movs	r3, #16
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 f9df 	bl	8002768 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x54>
		Error_Handler();
 80013b0:	f000 f98a 	bl	80016c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fc4c 	bl	8002c6c <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x7e>
		Error_Handler();
 80013da:	f000 f975 	bl	80016c8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013de:	2302      	movs	r3, #2
 80013e0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fdb9 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x98>
		Error_Handler();
 80013f4:	f000 f968 	bl	80016c8 <Error_Handler>
	}
}
 80013f8:	bf00      	nop
 80013fa:	3750      	adds	r7, #80	@ 0x50
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <MX_ADC1_Init+0x74>)
 8001412:	4a19      	ldr	r2, [pc, #100]	@ (8001478 <MX_ADC1_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <MX_ADC1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <MX_ADC1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <MX_ADC1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <MX_ADC1_Init+0x74>)
 800142a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800142e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_ADC1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <MX_ADC1_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800143c:	480d      	ldr	r0, [pc, #52]	@ (8001474 <MX_ADC1_Init+0x74>)
 800143e:	f000 fc07 	bl	8001c50 <HAL_ADC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001448:	f000 f93e 	bl	80016c8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800144c:	2303      	movs	r3, #3
 800144e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001450:	2301      	movs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_ADC1_Init+0x74>)
 800145e:	f000 fde1 	bl	8002024 <HAL_ADC_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001468:	f000 f92e 	bl	80016c8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000008c 	.word	0x2000008c
 8001478:	40012400 	.word	0x40012400

0800147c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b096      	sub	sp, #88	@ 0x58
 8001480:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001482:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001490:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2220      	movs	r2, #32
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 ff5c 	bl	8004372 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80014ba:	4b47      	ldr	r3, [pc, #284]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014bc:	4a47      	ldr	r2, [pc, #284]	@ (80015dc <MX_TIM1_Init+0x160>)
 80014be:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 321;
 80014c0:	4b45      	ldr	r3, [pc, #276]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014c2:	f240 1241 	movw	r2, #321	@ 0x141
 80014c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 255;
 80014ce:	4b42      	ldr	r3, [pc, #264]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014d0:	22ff      	movs	r2, #255	@ 0xff
 80014d2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80014da:	4b3f      	ldr	r3, [pc, #252]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e0:	4b3d      	ldr	r3, [pc, #244]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80014e6:	483c      	ldr	r0, [pc, #240]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80014e8:	f001 fea6 	bl	8003238 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80014f2:	f000 f8e9 	bl	80016c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80014f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	653b      	str	r3, [r7, #80]	@ 0x50
	sClockSourceConfig.ClockFilter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001508:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800150c:	4619      	mov	r1, r3
 800150e:	4832      	ldr	r0, [pc, #200]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 8001510:	f002 f8e6 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xa2>
		Error_Handler();
 800151a:	f000 f8d5 	bl	80016c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800151e:	482e      	ldr	r0, [pc, #184]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 8001520:	f001 fed9 	bl	80032d6 <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xb2>
		Error_Handler();
 800152a:	f000 f8cd 	bl	80016c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001536:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800153a:	4619      	mov	r1, r3
 800153c:	4826      	ldr	r0, [pc, #152]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 800153e:	f002 fd25 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 8001548:	f000 f8be 	bl	80016c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	@ 0x60
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 127;
 8001550:	237f      	movs	r3, #127	@ 0x7f
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156c:	2204      	movs	r2, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4819      	ldr	r0, [pc, #100]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 8001572:	f001 fff3 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 800157c:	f000 f8a4 	bl	80016c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	2208      	movs	r2, #8
 8001586:	4619      	mov	r1, r3
 8001588:	4813      	ldr	r0, [pc, #76]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 800158a:	f001 ffe7 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x11c>
			!= HAL_OK) {
		Error_Handler();
 8001594:	f000 f898 	bl	80016c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80015bc:	f002 fd44 	bl	8004048 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0x14e>
			!= HAL_OK) {
		Error_Handler();
 80015c6:	f000 f87f 	bl	80016c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80015ca:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <MX_TIM1_Init+0x15c>)
 80015cc:	f000 f96c 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3758      	adds	r7, #88	@ 0x58
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000104 	.word	0x20000104
 80015dc:	40012c00 	.word	0x40012c00

080015e0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <MX_TIM2_Init+0xb8>)
 80015fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001602:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <MX_TIM2_Init+0xb8>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <MX_TIM2_Init+0xb8>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001610:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <MX_TIM2_Init+0xb8>)
 8001612:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001616:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <MX_TIM2_Init+0xb8>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <MX_TIM2_Init+0xb8>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001624:	481c      	ldr	r0, [pc, #112]	@ (8001698 <MX_TIM2_Init+0xb8>)
 8001626:	f001 feae 	bl	8003386 <HAL_TIM_IC_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001630:	f000 f84a 	bl	80016c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	4815      	ldr	r0, [pc, #84]	@ (8001698 <MX_TIM2_Init+0xb8>)
 8001644:	f002 fca2 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0x72>
			!= HAL_OK) {
		Error_Handler();
 800164e:	f000 f83b 	bl	80016c8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001656:	2301      	movs	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	@ (8001698 <MX_TIM2_Init+0xb8>)
 800166a:	f001 fedb 	bl	8003424 <HAL_TIM_IC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x98>
		Error_Handler();
 8001674:	f000 f828 	bl	80016c8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001678:	463b      	mov	r3, r7
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	@ (8001698 <MX_TIM2_Init+0xb8>)
 8001680:	f001 fed0 	bl	8003424 <HAL_TIM_IC_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0xae>
		Error_Handler();
 800168a:	f000 f81d 	bl	80016c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000bc 	.word	0x200000bc

0800169c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <MX_GPIO_Init+0x28>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <MX_GPIO_Init+0x28>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <MX_GPIO_Init+0x28>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_MspInit+0x5c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MspInit+0x60>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_MspInit+0x60>)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000

08001738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <HAL_ADC_MspInit+0x6c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d121      	bne.n	800179c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a0c      	ldr	r2, [pc, #48]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001788:	2308      	movs	r3, #8
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178c:	2303      	movs	r3, #3
 800178e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <HAL_ADC_MspInit+0x74>)
 8001798:	f000 fe62 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40012400 	.word	0x40012400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010800 	.word	0x40010800

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <HAL_TIM_Base_MspInit+0x74>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d124      	bne.n	800181a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_TIM_Base_MspInit+0x78>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <HAL_TIM_Base_MspInit+0x78>)
 80017d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_TIM_Base_MspInit+0x78>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_TIM_Base_MspInit+0x78>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <HAL_TIM_Base_MspInit+0x78>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <HAL_TIM_Base_MspInit+0x78>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	@ (800182c <HAL_TIM_Base_MspInit+0x7c>)
 8001816:	f000 fe23 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40012c00 	.word	0x40012c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40010800 	.word	0x40010800

08001830 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800184e:	d123      	bne.n	8001898 <HAL_TIM_IC_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <HAL_TIM_IC_MspInit+0x70>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <HAL_TIM_IC_MspInit+0x70>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_TIM_IC_MspInit+0x70>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HAL_TIM_IC_MspInit+0x70>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <HAL_TIM_IC_MspInit+0x70>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_TIM_IC_MspInit+0x70>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001880:	2303      	movs	r3, #3
 8001882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <HAL_TIM_IC_MspInit+0x74>)
 8001894:	f000 fde4 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010800 	.word	0x40010800

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <HAL_TIM_MspPostInit+0x5c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d118      	bne.n	80018fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_TIM_MspPostInit+0x60>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <HAL_TIM_MspPostInit+0x60>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <HAL_TIM_MspPostInit+0x60>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <HAL_TIM_MspPostInit+0x64>)
 80018f6:	f000 fdb3 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40010800 	.word	0x40010800

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f936 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <_kill>:

int _kill(int pid, int sig)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001980:	f002 fd46 	bl	8004410 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	2216      	movs	r2, #22
 8001988:	601a      	str	r2, [r3, #0]
  return -1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_exit>:

void _exit (int status)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800199e:	f04f 31ff 	mov.w	r1, #4294967295
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffe7 	bl	8001976 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <_exit+0x12>

080019ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e00a      	b.n	80019d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019be:	f3af 8000 	nop.w
 80019c2:	4601      	mov	r1, r0
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dbf0      	blt.n	80019be <_read+0x12>
  }

  return len;
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e009      	b.n	8001a0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf1      	blt.n	80019f8 <_write+0x12>
  }
  return len;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_close>:

int _close(int file)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a44:	605a      	str	r2, [r3, #4]
  return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <_isatty>:

int _isatty(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a88:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <_sbrk+0x5c>)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <_sbrk+0x60>)
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <_sbrk+0x64>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <_sbrk+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab0:	f002 fcae 	bl	8004410 <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e009      	b.n	8001ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a05      	ldr	r2, [pc, #20]	@ (8001ae4 <_sbrk+0x64>)
 8001ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20005000 	.word	0x20005000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	20000214 	.word	0x20000214
 8001ae8:	20000368 	.word	0x20000368

08001aec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af8:	f7ff fff8 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001afc:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001afe:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b00:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b14:	4c09      	ldr	r4, [pc, #36]	@ (8001b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b22:	f002 fc7b 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b26:	f7ff fb83 	bl	8001230 <main>
  bx lr
 8001b2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b34:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 8001b38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b3c:	20000368 	.word	0x20000368

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <HAL_Init+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_Init+0x28>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 fc4f 	bl	80023f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	200f      	movs	r0, #15
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fdb8 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fc59 	bl	8002446 <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 fc2f 	bl	800240e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000010 	.word	0x20000010
 8001bcc:	2000000c 	.word	0x2000000c

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a03      	ldr	r2, [pc, #12]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000218 	.word	0x20000218

08001bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	@ (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000218 	.word	0x20000218

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffe0 	bl	8001bf4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000010 	.word	0x20000010

08001c50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0be      	b.n	8001df0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fd52 	bl	8001738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fabd 	bl	8002214 <ADC_ConversionStop_Disable>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 8099 	bne.w	8001dde <HAL_ADC_Init+0x18e>
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 8095 	bne.w	8001dde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cbc:	f023 0302 	bic.w	r3, r3, #2
 8001cc0:	f043 0202 	orr.w	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7b1b      	ldrb	r3, [r3, #12]
 8001cd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_Init+0xa2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_ADC_Init+0xa8>
 8001cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf6:	e000      	b.n	8001cfa <HAL_ADC_Init+0xaa>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7d1b      	ldrb	r3, [r3, #20]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d119      	bne.n	8001d3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7b1b      	ldrb	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	035a      	lsls	r2, r3, #13
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e00b      	b.n	8001d3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_ADC_Init+0x1a8>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d6c:	d003      	beq.n	8001d76 <HAL_ADC_Init+0x126>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d104      	bne.n	8001d80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	051b      	lsls	r3, r3, #20
 8001d7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <HAL_ADC_Init+0x1ac>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10b      	bne.n	8001dbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dba:	e018      	b.n	8001dee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	f023 0312 	bic.w	r3, r3, #18
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ddc:	e007      	b.n	8001dee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	ffe1f7fd 	.word	0xffe1f7fd
 8001dfc:	ff1f0efe 	.word	0xff1f0efe

08001e00 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e16:	f7ff feed 	bl	8001bf4 <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	f043 0220 	orr.w	r2, r3, #32
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0d3      	b.n	8001fea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d131      	bne.n	8001eb4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d12a      	bne.n	8001eb4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e5e:	e021      	b.n	8001ea4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e66:	d01d      	beq.n	8001ea4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_ADC_PollForConversion+0x7e>
 8001e6e:	f7ff fec1 	bl	8001bf4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d212      	bcs.n	8001ea4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	f043 0204 	orr.w	r2, r3, #4
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0a2      	b.n	8001fea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0d6      	beq.n	8001e60 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eb2:	e070      	b.n	8001f96 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff4 <HAL_ADC_PollForConversion+0x1f4>)
 8001eb6:	681c      	ldr	r4, [r3, #0]
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f001 f907 	bl	80030cc <HAL_RCCEx_GetPeriphCLKFreq>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff8 <HAL_ADC_PollForConversion+0x1f8>)
 8001ecc:	400b      	ands	r3, r1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x104>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68d9      	ldr	r1, [r3, #12]
 8001ed8:	4b48      	ldr	r3, [pc, #288]	@ (8001ffc <HAL_ADC_PollForConversion+0x1fc>)
 8001eda:	400b      	ands	r3, r1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x104>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <HAL_ADC_PollForConversion+0x200>)
 8001ee8:	400b      	ands	r3, r1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x100>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	4b43      	ldr	r3, [pc, #268]	@ (8002004 <HAL_ADC_PollForConversion+0x204>)
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x100>
 8001efc:	2314      	movs	r3, #20
 8001efe:	e020      	b.n	8001f42 <HAL_ADC_PollForConversion+0x142>
 8001f00:	2329      	movs	r3, #41	@ 0x29
 8001f02:	e01e      	b.n	8001f42 <HAL_ADC_PollForConversion+0x142>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6919      	ldr	r1, [r3, #16]
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002000 <HAL_ADC_PollForConversion+0x200>)
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x120>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68d9      	ldr	r1, [r3, #12]
 8001f18:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <HAL_ADC_PollForConversion+0x204>)
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00d      	beq.n	8001f3c <HAL_ADC_PollForConversion+0x13c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	4b38      	ldr	r3, [pc, #224]	@ (8002008 <HAL_ADC_PollForConversion+0x208>)
 8001f28:	400b      	ands	r3, r1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_ADC_PollForConversion+0x140>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68d9      	ldr	r1, [r3, #12]
 8001f34:	4b34      	ldr	r3, [pc, #208]	@ (8002008 <HAL_ADC_PollForConversion+0x208>)
 8001f36:	400b      	ands	r3, r1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_PollForConversion+0x140>
 8001f3c:	2354      	movs	r3, #84	@ 0x54
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_PollForConversion+0x142>
 8001f40:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f48:	e021      	b.n	8001f8e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d01a      	beq.n	8001f88 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_ADC_PollForConversion+0x168>
 8001f58:	f7ff fe4c 	bl	8001bf4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d20f      	bcs.n	8001f88 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d90b      	bls.n	8001f88 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e030      	b.n	8001fea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d8d9      	bhi.n	8001f4a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0212 	mvn.w	r2, #18
 8001f9e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fb6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fba:	d115      	bne.n	8001fe8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	24924924 	.word	0x24924924
 8001ffc:	00924924 	.word	0x00924924
 8002000:	12492492 	.word	0x12492492
 8002004:	00492492 	.word	0x00492492
 8002008:	00249249 	.word	0x00249249

0800200c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x20>
 8002040:	2302      	movs	r3, #2
 8002042:	e0dc      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1da>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b06      	cmp	r3, #6
 8002052:	d81c      	bhi.n	800208e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b05      	subs	r3, #5
 8002066:	221f      	movs	r2, #31
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	4019      	ands	r1, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	3b05      	subs	r3, #5
 8002080:	fa00 f203 	lsl.w	r2, r0, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	635a      	str	r2, [r3, #52]	@ 0x34
 800208c:	e03c      	b.n	8002108 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d81c      	bhi.n	80020d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b23      	subs	r3, #35	@ 0x23
 80020a8:	221f      	movs	r2, #31
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4019      	ands	r1, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b23      	subs	r3, #35	@ 0x23
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ce:	e01b      	b.n	8002108 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b41      	subs	r3, #65	@ 0x41
 80020e2:	221f      	movs	r2, #31
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4019      	ands	r1, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b41      	subs	r3, #65	@ 0x41
 80020fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b09      	cmp	r3, #9
 800210e:	d91c      	bls.n	800214a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68d9      	ldr	r1, [r3, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	3b1e      	subs	r3, #30
 8002122:	2207      	movs	r2, #7
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	4019      	ands	r1, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6898      	ldr	r0, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	3b1e      	subs	r3, #30
 800213c:	fa00 f203 	lsl.w	r2, r0, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	e019      	b.n	800217e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6919      	ldr	r1, [r3, #16]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	2207      	movs	r2, #7
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	4019      	ands	r1, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6898      	ldr	r0, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b10      	cmp	r3, #16
 8002184:	d003      	beq.n	800218e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800218a:	2b11      	cmp	r3, #17
 800218c:	d132      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <HAL_ADC_ConfigChannel+0x1e4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d125      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d126      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d11a      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021be:	4b13      	ldr	r3, [pc, #76]	@ (800220c <HAL_ADC_ConfigChannel+0x1e8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a13      	ldr	r2, [pc, #76]	@ (8002210 <HAL_ADC_ConfigChannel+0x1ec>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0c9a      	lsrs	r2, r3, #18
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x1b2>
 80021e2:	e007      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40012400 	.word	0x40012400
 800220c:	20000008 	.word	0x20000008
 8002210:	431bde83 	.word	0x431bde83

08002214 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d12e      	bne.n	800228c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800223e:	f7ff fcd9 	bl	8001bf4 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002244:	e01b      	b.n	800227e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002246:	f7ff fcd5 	bl	8001bf4 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d914      	bls.n	800227e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10d      	bne.n	800227e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e007      	b.n	800228e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d0dc      	beq.n	8002246 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	@ (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c4:	d301      	bcc.n	80023ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00f      	b.n	80023ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <SysTick_Config+0x40>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d2:	210f      	movs	r1, #15
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f7ff ff90 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <SysTick_Config+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e2:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <SysTick_Config+0x40>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	e000e010 	.word	0xe000e010

080023f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff49 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002420:	f7ff ff5e 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 8002424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f7ff ff90 	bl	8002350 <NVIC_EncodePriority>
 8002430:	4602      	mov	r2, r0
 8002432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff5f 	bl	80022fc <__NVIC_SetPriority>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffb0 	bl	80023b4 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b08b      	sub	sp, #44	@ 0x2c
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	e169      	b.n	8002748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002474:	2201      	movs	r2, #1
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8158 	bne.w	8002742 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a9a      	ldr	r2, [pc, #616]	@ (8002700 <HAL_GPIO_Init+0x2a0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d05e      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 800249c:	4a98      	ldr	r2, [pc, #608]	@ (8002700 <HAL_GPIO_Init+0x2a0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d875      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024a2:	4a98      	ldr	r2, [pc, #608]	@ (8002704 <HAL_GPIO_Init+0x2a4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d058      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024a8:	4a96      	ldr	r2, [pc, #600]	@ (8002704 <HAL_GPIO_Init+0x2a4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d86f      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024ae:	4a96      	ldr	r2, [pc, #600]	@ (8002708 <HAL_GPIO_Init+0x2a8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d052      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024b4:	4a94      	ldr	r2, [pc, #592]	@ (8002708 <HAL_GPIO_Init+0x2a8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d869      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024ba:	4a94      	ldr	r2, [pc, #592]	@ (800270c <HAL_GPIO_Init+0x2ac>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d04c      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024c0:	4a92      	ldr	r2, [pc, #584]	@ (800270c <HAL_GPIO_Init+0x2ac>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d863      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024c6:	4a92      	ldr	r2, [pc, #584]	@ (8002710 <HAL_GPIO_Init+0x2b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d046      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024cc:	4a90      	ldr	r2, [pc, #576]	@ (8002710 <HAL_GPIO_Init+0x2b0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d85d      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d82a      	bhi.n	800252c <HAL_GPIO_Init+0xcc>
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d859      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024da:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <HAL_GPIO_Init+0x80>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	0800255b 	.word	0x0800255b
 80024e4:	08002535 	.word	0x08002535
 80024e8:	08002547 	.word	0x08002547
 80024ec:	08002589 	.word	0x08002589
 80024f0:	0800258f 	.word	0x0800258f
 80024f4:	0800258f 	.word	0x0800258f
 80024f8:	0800258f 	.word	0x0800258f
 80024fc:	0800258f 	.word	0x0800258f
 8002500:	0800258f 	.word	0x0800258f
 8002504:	0800258f 	.word	0x0800258f
 8002508:	0800258f 	.word	0x0800258f
 800250c:	0800258f 	.word	0x0800258f
 8002510:	0800258f 	.word	0x0800258f
 8002514:	0800258f 	.word	0x0800258f
 8002518:	0800258f 	.word	0x0800258f
 800251c:	0800258f 	.word	0x0800258f
 8002520:	0800258f 	.word	0x0800258f
 8002524:	0800253d 	.word	0x0800253d
 8002528:	08002551 	.word	0x08002551
 800252c:	4a79      	ldr	r2, [pc, #484]	@ (8002714 <HAL_GPIO_Init+0x2b4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002532:	e02c      	b.n	800258e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	623b      	str	r3, [r7, #32]
          break;
 800253a:	e029      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	3304      	adds	r3, #4
 8002542:	623b      	str	r3, [r7, #32]
          break;
 8002544:	e024      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	3308      	adds	r3, #8
 800254c:	623b      	str	r3, [r7, #32]
          break;
 800254e:	e01f      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	330c      	adds	r3, #12
 8002556:	623b      	str	r3, [r7, #32]
          break;
 8002558:	e01a      	b.n	8002590 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002562:	2304      	movs	r3, #4
 8002564:	623b      	str	r3, [r7, #32]
          break;
 8002566:	e013      	b.n	8002590 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002570:	2308      	movs	r3, #8
 8002572:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	611a      	str	r2, [r3, #16]
          break;
 800257a:	e009      	b.n	8002590 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800257c:	2308      	movs	r3, #8
 800257e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	615a      	str	r2, [r3, #20]
          break;
 8002586:	e003      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
          break;
 800258c:	e000      	b.n	8002590 <HAL_GPIO_Init+0x130>
          break;
 800258e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2bff      	cmp	r3, #255	@ 0xff
 8002594:	d801      	bhi.n	800259a <HAL_GPIO_Init+0x13a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	e001      	b.n	800259e <HAL_GPIO_Init+0x13e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2bff      	cmp	r3, #255	@ 0xff
 80025a4:	d802      	bhi.n	80025ac <HAL_GPIO_Init+0x14c>
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x152>
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	3b08      	subs	r3, #8
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	210f      	movs	r1, #15
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	401a      	ands	r2, r3
 80025c4:	6a39      	ldr	r1, [r7, #32]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80b1 	beq.w	8002742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002718 <HAL_GPIO_Init+0x2b8>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002718 <HAL_GPIO_Init+0x2b8>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <HAL_GPIO_Init+0x2b8>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025f8:	4a48      	ldr	r2, [pc, #288]	@ (800271c <HAL_GPIO_Init+0x2bc>)
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a40      	ldr	r2, [pc, #256]	@ (8002720 <HAL_GPIO_Init+0x2c0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <HAL_GPIO_Init+0x1ec>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3f      	ldr	r2, [pc, #252]	@ (8002724 <HAL_GPIO_Init+0x2c4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00d      	beq.n	8002648 <HAL_GPIO_Init+0x1e8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3e      	ldr	r2, [pc, #248]	@ (8002728 <HAL_GPIO_Init+0x2c8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <HAL_GPIO_Init+0x1e4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3d      	ldr	r2, [pc, #244]	@ (800272c <HAL_GPIO_Init+0x2cc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_GPIO_Init+0x1e0>
 800263c:	2303      	movs	r3, #3
 800263e:	e006      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 8002640:	2304      	movs	r3, #4
 8002642:	e004      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 8002644:	2302      	movs	r3, #2
 8002646:	e002      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 800264c:	2300      	movs	r3, #0
 800264e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002650:	f002 0203 	and.w	r2, r2, #3
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	4093      	lsls	r3, r2
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800265e:	492f      	ldr	r1, [pc, #188]	@ (800271c <HAL_GPIO_Init+0x2bc>)
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002678:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	492c      	ldr	r1, [pc, #176]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002686:	4b2a      	ldr	r3, [pc, #168]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	43db      	mvns	r3, r3
 800268e:	4928      	ldr	r1, [pc, #160]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 8002690:	4013      	ands	r3, r2
 8002692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026a0:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	4922      	ldr	r1, [pc, #136]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ae:	4b20      	ldr	r3, [pc, #128]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	491e      	ldr	r1, [pc, #120]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c8:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4918      	ldr	r1, [pc, #96]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026d6:	4b16      	ldr	r3, [pc, #88]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	43db      	mvns	r3, r3
 80026de:	4914      	ldr	r1, [pc, #80]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d021      	beq.n	8002734 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	490e      	ldr	r1, [pc, #56]	@ (8002730 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e021      	b.n	8002742 <HAL_GPIO_Init+0x2e2>
 80026fe:	bf00      	nop
 8002700:	10320000 	.word	0x10320000
 8002704:	10310000 	.word	0x10310000
 8002708:	10220000 	.word	0x10220000
 800270c:	10210000 	.word	0x10210000
 8002710:	10120000 	.word	0x10120000
 8002714:	10110000 	.word	0x10110000
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000
 8002720:	40010800 	.word	0x40010800
 8002724:	40010c00 	.word	0x40010c00
 8002728:	40011000 	.word	0x40011000
 800272c:	40011400 	.word	0x40011400
 8002730:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_GPIO_Init+0x304>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	43db      	mvns	r3, r3
 800273c:	4909      	ldr	r1, [pc, #36]	@ (8002764 <HAL_GPIO_Init+0x304>)
 800273e:	4013      	ands	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f ae8e 	bne.w	8002474 <HAL_GPIO_Init+0x14>
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	372c      	adds	r7, #44	@ 0x2c
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	40010400 	.word	0x40010400

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e272      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8087 	beq.w	8002896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	4b92      	ldr	r3, [pc, #584]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b04      	cmp	r3, #4
 8002792:	d00c      	beq.n	80027ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002794:	4b8f      	ldr	r3, [pc, #572]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d112      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
 80027a0:	4b8c      	ldr	r3, [pc, #560]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ac:	d10b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ae:	4b89      	ldr	r3, [pc, #548]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d06c      	beq.n	8002894 <HAL_RCC_OscConfig+0x12c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d168      	bne.n	8002894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e24c      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x76>
 80027d0:	4b80      	ldr	r3, [pc, #512]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a7f      	ldr	r2, [pc, #508]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e02e      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x98>
 80027e6:	4b7b      	ldr	r3, [pc, #492]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7a      	ldr	r2, [pc, #488]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b78      	ldr	r3, [pc, #480]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a77      	ldr	r2, [pc, #476]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0xbc>
 800280a:	4b72      	ldr	r3, [pc, #456]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a71      	ldr	r2, [pc, #452]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b6f      	ldr	r3, [pc, #444]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6e      	ldr	r2, [pc, #440]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002824:	4b6b      	ldr	r3, [pc, #428]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6a      	ldr	r2, [pc, #424]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b68      	ldr	r3, [pc, #416]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a67      	ldr	r2, [pc, #412]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff f9d6 	bl	8001bf4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f9d2 	bl	8001bf4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e200      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b5d      	ldr	r3, [pc, #372]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xe4>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff f9c2 	bl	8001bf4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f9be 	bl	8001bf4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1ec      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b53      	ldr	r3, [pc, #332]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x10c>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028a2:	4b4c      	ldr	r3, [pc, #304]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ae:	4b49      	ldr	r3, [pc, #292]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
 80028ba:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b43      	ldr	r3, [pc, #268]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c0      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3d      	ldr	r3, [pc, #244]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4939      	ldr	r1, [pc, #228]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b36      	ldr	r3, [pc, #216]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7ff f977 	bl	8001bf4 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7ff f973 	bl	8001bf4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a1      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b2a      	ldr	r3, [pc, #168]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4927      	ldr	r1, [pc, #156]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff f956 	bl	8001bf4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff f952 	bl	8001bf4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e180      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03a      	beq.n	80029ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d019      	beq.n	80029b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <HAL_RCC_OscConfig+0x274>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7ff f936 	bl	8001bf4 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298c:	f7ff f932 	bl	8001bf4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e160      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f000 faba 	bl	8002f24 <RCC_Delay>
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <HAL_RCC_OscConfig+0x274>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7ff f91c 	bl	8001bf4 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7ff f918 	bl	8001bf4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d908      	bls.n	80029e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e146      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	42420000 	.word	0x42420000
 80029dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b92      	ldr	r3, [pc, #584]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e9      	bne.n	80029c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a6 	beq.w	8002b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b8b      	ldr	r3, [pc, #556]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b88      	ldr	r3, [pc, #544]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a87      	ldr	r2, [pc, #540]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b85      	ldr	r3, [pc, #532]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b82      	ldr	r3, [pc, #520]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d118      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a32:	4b7f      	ldr	r3, [pc, #508]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7e      	ldr	r2, [pc, #504]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7ff f8d9 	bl	8001bf4 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a46:	f7ff f8d5 	bl	8001bf4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	@ 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e103      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	4b75      	ldr	r3, [pc, #468]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x312>
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a6e      	ldr	r2, [pc, #440]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	e02d      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x334>
 8002a82:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	4a69      	ldr	r2, [pc, #420]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6213      	str	r3, [r2, #32]
 8002a8e:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a66      	ldr	r2, [pc, #408]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6213      	str	r3, [r2, #32]
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x356>
 8002aa4:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a60      	ldr	r2, [pc, #384]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002abe:	4b5b      	ldr	r3, [pc, #364]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a57      	ldr	r2, [pc, #348]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d015      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7ff f889 	bl	8001bf4 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7ff f885 	bl	8001bf4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0b1      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ee      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x37e>
 8002b08:	e014      	b.n	8002b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff f873 	bl	8001bf4 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7ff f86f 	bl	8001bf4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e09b      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b28:	4b40      	ldr	r3, [pc, #256]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d061      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d146      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b33      	ldr	r3, [pc, #204]	@ (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7ff f843 	bl	8001bf4 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7ff f83f 	bl	8001bf4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e06d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b84:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9a:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4921      	ldr	r1, [pc, #132]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a19      	ldr	r1, [r3, #32]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	491b      	ldr	r1, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff f813 	bl	8001bf4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7ff f80f 	bl	8001bf4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e03d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46a>
 8002bf0:	e035      	b.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fffc 	bl	8001bf4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fff8 	bl	8001bf4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e026      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x498>
 8002c1e:	e01e      	b.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e019      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_OscConfig+0x500>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0d0      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d910      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b67      	ldr	r3, [pc, #412]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0207 	bic.w	r2, r3, #7
 8002c96:	4965      	ldr	r1, [pc, #404]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d040      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d115      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b41      	ldr	r3, [pc, #260]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e073      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06b      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4936      	ldr	r1, [pc, #216]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe ff4a 	bl	8001bf4 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe ff46 	bl	8001bf4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e053      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d210      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	4922      	ldr	r1, [pc, #136]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_RCC_ClockConfig+0x1cc>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1d0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fea8 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	080050d4 	.word	0x080050d4
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d002      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x30>
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x36>
 8002e6e:	e027      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e70:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e72:	613b      	str	r3, [r7, #16]
      break;
 8002e74:	e027      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	4a17      	ldr	r2, [pc, #92]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	0c5b      	lsrs	r3, r3, #17
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	4a11      	ldr	r2, [pc, #68]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e9a:	5cd3      	ldrb	r3, [r2, r3]
 8002e9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea2:	fb03 f202 	mul.w	r2, r3, r2
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e004      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
      break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ec2:	613b      	str	r3, [r7, #16]
      break;
 8002ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec6:	693b      	ldr	r3, [r7, #16]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	007a1200 	.word	0x007a1200
 8002edc:	080050ec 	.word	0x080050ec
 8002ee0:	080050fc 	.word	0x080050fc
 8002ee4:	003d0900 	.word	0x003d0900

08002ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eec:	4b02      	ldr	r3, [pc, #8]	@ (8002ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000008 	.word	0x20000008

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f00:	f7ff fff2 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	0adb      	lsrs	r3, r3, #11
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080050e4 	.word	0x080050e4

08002f24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <RCC_Delay+0x34>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <RCC_Delay+0x38>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0a5b      	lsrs	r3, r3, #9
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f40:	bf00      	nop
  }
  while (Delay --);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	60fa      	str	r2, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f9      	bne.n	8002f40 <RCC_Delay+0x1c>
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	20000008 	.word	0x20000008
 8002f5c:	10624dd3 	.word	0x10624dd3

08002f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d07d      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f80:	4b4f      	ldr	r3, [pc, #316]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10d      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4a4b      	ldr	r2, [pc, #300]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	61d3      	str	r3, [r2, #28]
 8002f98:	4b49      	ldr	r3, [pc, #292]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	4b46      	ldr	r3, [pc, #280]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d118      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb4:	4b43      	ldr	r3, [pc, #268]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a42      	ldr	r2, [pc, #264]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe fe18 	bl	8001bf4 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	e008      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc8:	f7fe fe14 	bl	8001bf4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	@ 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e06d      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b3a      	ldr	r3, [pc, #232]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe6:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02e      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	429a      	cmp	r2, r3
 8003002:	d027      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003004:	4b2e      	ldr	r3, [pc, #184]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300e:	4b2e      	ldr	r3, [pc, #184]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003014:	4b2c      	ldr	r3, [pc, #176]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800301a:	4a29      	ldr	r2, [pc, #164]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d014      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe fde3 	bl	8001bf4 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fe fddf 	bl	8001bf4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e036      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ee      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003054:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4917      	ldr	r1, [pc, #92]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	4313      	orrs	r3, r2
 8003064:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306c:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4a13      	ldr	r2, [pc, #76]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003076:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003084:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	490b      	ldr	r1, [pc, #44]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a2:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	4904      	ldr	r1, [pc, #16]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40007000 	.word	0x40007000
 80030c8:	42420440 	.word	0x42420440

080030cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	f200 808a 	bhi.w	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d045      	beq.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d075      	beq.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003102:	e082      	b.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003104:	4b46      	ldr	r3, [pc, #280]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800310a:	4b45      	ldr	r3, [pc, #276]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07b      	beq.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0c9b      	lsrs	r3, r3, #18
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	4a41      	ldr	r2, [pc, #260]	@ (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003120:	5cd3      	ldrb	r3, [r2, r3]
 8003122:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312e:	4b3c      	ldr	r3, [pc, #240]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	0c5b      	lsrs	r3, r3, #17
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	4a3b      	ldr	r2, [pc, #236]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003148:	4a38      	ldr	r2, [pc, #224]	@ (800322c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	e004      	b.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4a34      	ldr	r2, [pc, #208]	@ (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003164:	4b2e      	ldr	r3, [pc, #184]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003170:	d102      	bne.n	8003178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	61bb      	str	r3, [r7, #24]
      break;
 8003176:	e04a      	b.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	61bb      	str	r3, [r7, #24]
      break;
 8003186:	e042      	b.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003188:	4b25      	ldr	r3, [pc, #148]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003198:	d108      	bne.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80031a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	e01f      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b6:	d109      	bne.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80031b8:	4b19      	ldr	r3, [pc, #100]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80031c4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e00f      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d6:	d11c      	bne.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d016      	beq.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80031e4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80031e8:	61bb      	str	r3, [r7, #24]
      break;
 80031ea:	e012      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80031ec:	e011      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80031ee:	f7ff fe85 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0b9b      	lsrs	r3, r3, #14
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	61bb      	str	r3, [r7, #24]
      break;
 8003208:	e004      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003212:	bf00      	nop
    }
  }
  return (frequency);
 8003214:	69bb      	ldr	r3, [r7, #24]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	08005100 	.word	0x08005100
 8003228:	08005110 	.word	0x08005110
 800322c:	007a1200 	.word	0x007a1200
 8003230:	003d0900 	.word	0x003d0900
 8003234:	aaaaaaab 	.word	0xaaaaaaab

08003238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e041      	b.n	80032ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe faa6 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fafa 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e041      	b.n	800336c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f839 	bl	8003374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 faab 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e041      	b.n	800341c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d106      	bne.n	80033b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fe fa3f 	bl	8001830 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f000 fa53 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_TIM_IC_ConfigChannel+0x1e>
 800343e:	2302      	movs	r3, #2
 8003440:	e088      	b.n	8003554 <HAL_TIM_IC_ConfigChannel+0x130>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003460:	f000 fbf0 	bl	8003c44 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 020c 	bic.w	r2, r2, #12
 8003472:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6999      	ldr	r1, [r3, #24]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	619a      	str	r2, [r3, #24]
 8003486:	e060      	b.n	800354a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d11c      	bne.n	80034c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800349e:	f000 fc59 	bl	8003d54 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80034b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6999      	ldr	r1, [r3, #24]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	021a      	lsls	r2, r3, #8
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	619a      	str	r2, [r3, #24]
 80034c6:	e040      	b.n	800354a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d11b      	bne.n	8003506 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80034de:	f000 fca4 	bl	8003e2a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 020c 	bic.w	r2, r2, #12
 80034f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69d9      	ldr	r1, [r3, #28]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	61da      	str	r2, [r3, #28]
 8003504:	e021      	b.n	800354a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d11c      	bne.n	8003546 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800351c:	f000 fcc0 	bl	8003ea0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800352e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69d9      	ldr	r1, [r3, #28]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	021a      	lsls	r2, r3, #8
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	61da      	str	r2, [r3, #28]
 8003544:	e001      	b.n	800354a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003576:	2302      	movs	r3, #2
 8003578:	e0ae      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	f200 809f 	bhi.w	80036c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800358a:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080036c9 	.word	0x080036c9
 8003598:	080036c9 	.word	0x080036c9
 800359c:	080036c9 	.word	0x080036c9
 80035a0:	08003605 	.word	0x08003605
 80035a4:	080036c9 	.word	0x080036c9
 80035a8:	080036c9 	.word	0x080036c9
 80035ac:	080036c9 	.word	0x080036c9
 80035b0:	08003647 	.word	0x08003647
 80035b4:	080036c9 	.word	0x080036c9
 80035b8:	080036c9 	.word	0x080036c9
 80035bc:	080036c9 	.word	0x080036c9
 80035c0:	08003687 	.word	0x08003687
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f9b2 	bl	8003934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0208 	orr.w	r2, r2, #8
 80035de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0204 	bic.w	r2, r2, #4
 80035ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]
      break;
 8003602:	e064      	b.n	80036ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f9f8 	bl	8003a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800362e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6999      	ldr	r1, [r3, #24]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	619a      	str	r2, [r3, #24]
      break;
 8003644:	e043      	b.n	80036ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa41 	bl	8003ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0208 	orr.w	r2, r2, #8
 8003660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0204 	bic.w	r2, r2, #4
 8003670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	61da      	str	r2, [r3, #28]
      break;
 8003684:	e023      	b.n	80036ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fa8b 	bl	8003ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69d9      	ldr	r1, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	021a      	lsls	r2, r3, #8
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	61da      	str	r2, [r3, #28]
      break;
 80036c6:	e002      	b.n	80036ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	75fb      	strb	r3, [r7, #23]
      break;
 80036cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_ConfigClockSource+0x1c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0b4      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x186>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800371a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003722:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003734:	d03e      	beq.n	80037b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373a:	f200 8087 	bhi.w	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003742:	f000 8086 	beq.w	8003852 <HAL_TIM_ConfigClockSource+0x172>
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374a:	d87f      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b70      	cmp	r3, #112	@ 0x70
 800374e:	d01a      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xa6>
 8003750:	2b70      	cmp	r3, #112	@ 0x70
 8003752:	d87b      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b60      	cmp	r3, #96	@ 0x60
 8003756:	d050      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x11a>
 8003758:	2b60      	cmp	r3, #96	@ 0x60
 800375a:	d877      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b50      	cmp	r3, #80	@ 0x50
 800375e:	d03c      	beq.n	80037da <HAL_TIM_ConfigClockSource+0xfa>
 8003760:	2b50      	cmp	r3, #80	@ 0x50
 8003762:	d873      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b40      	cmp	r3, #64	@ 0x40
 8003766:	d058      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x13a>
 8003768:	2b40      	cmp	r3, #64	@ 0x40
 800376a:	d86f      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b30      	cmp	r3, #48	@ 0x30
 800376e:	d064      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	2b30      	cmp	r3, #48	@ 0x30
 8003772:	d86b      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d060      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d867      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d05c      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	2b10      	cmp	r3, #16
 8003782:	d05a      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	e062      	b.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003796:	f000 fbd9 	bl	8003f4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	609a      	str	r2, [r3, #8]
      break;
 80037b2:	e04f      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037c4:	f000 fbc2 	bl	8003f4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037d6:	609a      	str	r2, [r3, #8]
      break;
 80037d8:	e03c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 fa86 	bl	8003cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2150      	movs	r1, #80	@ 0x50
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fb90 	bl	8003f18 <TIM_ITRx_SetConfig>
      break;
 80037f8:	e02c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003806:	461a      	mov	r2, r3
 8003808:	f000 fae0 	bl	8003dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2160      	movs	r1, #96	@ 0x60
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fb80 	bl	8003f18 <TIM_ITRx_SetConfig>
      break;
 8003818:	e01c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	461a      	mov	r2, r3
 8003828:	f000 fa66 	bl	8003cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2140      	movs	r1, #64	@ 0x40
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fb70 	bl	8003f18 <TIM_ITRx_SetConfig>
      break;
 8003838:	e00c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f000 fb67 	bl	8003f18 <TIM_ITRx_SetConfig>
      break;
 800384a:	e003      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      break;
 8003850:	e000      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a29      	ldr	r2, [pc, #164]	@ (8003928 <TIM_Base_SetConfig+0xb8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x30>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x30>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a26      	ldr	r2, [pc, #152]	@ (800392c <TIM_Base_SetConfig+0xbc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x30>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a25      	ldr	r2, [pc, #148]	@ (8003930 <TIM_Base_SetConfig+0xc0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <TIM_Base_SetConfig+0xb8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d007      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a19      	ldr	r2, [pc, #100]	@ (800392c <TIM_Base_SetConfig+0xbc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <TIM_Base_SetConfig+0xc0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d108      	bne.n	80038e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <TIM_Base_SetConfig+0xb8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d103      	bne.n	8003918 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	615a      	str	r2, [r3, #20]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800

08003934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f023 0201 	bic.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0303 	bic.w	r3, r3, #3
 800396a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 0302 	bic.w	r3, r3, #2
 800397c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a1c      	ldr	r2, [pc, #112]	@ (80039fc <TIM_OC1_SetConfig+0xc8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10c      	bne.n	80039aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0308 	bic.w	r3, r3, #8
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <TIM_OC1_SetConfig+0xc8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d111      	bne.n	80039d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40012c00 	.word	0x40012c00

08003a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 0210 	bic.w	r2, r3, #16
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f023 0320 	bic.w	r3, r3, #32
 8003a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <TIM_OC2_SetConfig+0xd0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10d      	bne.n	8003a7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a14      	ldr	r2, [pc, #80]	@ (8003ad0 <TIM_OC2_SetConfig+0xd0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d113      	bne.n	8003aac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00

08003ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba4 <TIM_OC3_SetConfig+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10d      	bne.n	8003b4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a14      	ldr	r2, [pc, #80]	@ (8003ba4 <TIM_OC3_SetConfig+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d113      	bne.n	8003b7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40012c00 	.word	0x40012c00

08003ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	031b      	lsls	r3, r3, #12
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0f      	ldr	r2, [pc, #60]	@ (8003c40 <TIM_OC4_SetConfig+0x98>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	40012c00 	.word	0x40012c00

08003c44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f023 0201 	bic.w	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cec <TIM_TI1_SetConfig+0xa8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_TI1_SetConfig+0x46>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c78:	d007      	beq.n	8003c8a <TIM_TI1_SetConfig+0x46>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf0 <TIM_TI1_SetConfig+0xac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_TI1_SetConfig+0x46>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf4 <TIM_TI1_SetConfig+0xb0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <TIM_TI1_SetConfig+0x4a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <TIM_TI1_SetConfig+0x4c>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e003      	b.n	8003cae <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f023 030a 	bic.w	r3, r3, #10
 8003cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 030a 	and.w	r3, r3, #10
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800

08003cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0201 	bic.w	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 030a 	bic.w	r3, r3, #10
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0210 	bic.w	r2, r3, #16
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	031b      	lsls	r3, r3, #12
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003da6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0210 	bic.w	r2, r3, #16
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	031b      	lsls	r3, r3, #12
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	031b      	lsls	r3, r3, #12
 8003ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f043 0307 	orr.w	r3, r3, #7
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	609a      	str	r2, [r3, #8]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e046      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a12      	ldr	r2, [pc, #72]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a10      	ldr	r2, [pc, #64]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800

08004048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004060:	2302      	movs	r3, #2
 8004062:	e03d      	b.n	80040e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
	...

080040ec <rand>:
 80040ec:	4b16      	ldr	r3, [pc, #88]	@ (8004148 <rand+0x5c>)
 80040ee:	b510      	push	{r4, lr}
 80040f0:	681c      	ldr	r4, [r3, #0]
 80040f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80040f4:	b9b3      	cbnz	r3, 8004124 <rand+0x38>
 80040f6:	2018      	movs	r0, #24
 80040f8:	f000 fa1e 	bl	8004538 <malloc>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6320      	str	r0, [r4, #48]	@ 0x30
 8004100:	b920      	cbnz	r0, 800410c <rand+0x20>
 8004102:	2152      	movs	r1, #82	@ 0x52
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <rand+0x60>)
 8004106:	4812      	ldr	r0, [pc, #72]	@ (8004150 <rand+0x64>)
 8004108:	f000 f9b0 	bl	800446c <__assert_func>
 800410c:	4911      	ldr	r1, [pc, #68]	@ (8004154 <rand+0x68>)
 800410e:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <rand+0x6c>)
 8004110:	e9c0 1300 	strd	r1, r3, [r0]
 8004114:	4b11      	ldr	r3, [pc, #68]	@ (800415c <rand+0x70>)
 8004116:	2100      	movs	r1, #0
 8004118:	6083      	str	r3, [r0, #8]
 800411a:	230b      	movs	r3, #11
 800411c:	8183      	strh	r3, [r0, #12]
 800411e:	2001      	movs	r0, #1
 8004120:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004124:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004126:	480e      	ldr	r0, [pc, #56]	@ (8004160 <rand+0x74>)
 8004128:	690b      	ldr	r3, [r1, #16]
 800412a:	694c      	ldr	r4, [r1, #20]
 800412c:	4358      	muls	r0, r3
 800412e:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <rand+0x78>)
 8004130:	fb02 0004 	mla	r0, r2, r4, r0
 8004134:	fba3 3202 	umull	r3, r2, r3, r2
 8004138:	3301      	adds	r3, #1
 800413a:	eb40 0002 	adc.w	r0, r0, r2
 800413e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004142:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004146:	bd10      	pop	{r4, pc}
 8004148:	20000020 	.word	0x20000020
 800414c:	08005112 	.word	0x08005112
 8004150:	08005129 	.word	0x08005129
 8004154:	abcd330e 	.word	0xabcd330e
 8004158:	e66d1234 	.word	0xe66d1234
 800415c:	0005deec 	.word	0x0005deec
 8004160:	5851f42d 	.word	0x5851f42d
 8004164:	4c957f2d 	.word	0x4c957f2d

08004168 <std>:
 8004168:	2300      	movs	r3, #0
 800416a:	b510      	push	{r4, lr}
 800416c:	4604      	mov	r4, r0
 800416e:	e9c0 3300 	strd	r3, r3, [r0]
 8004172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004176:	6083      	str	r3, [r0, #8]
 8004178:	8181      	strh	r1, [r0, #12]
 800417a:	6643      	str	r3, [r0, #100]	@ 0x64
 800417c:	81c2      	strh	r2, [r0, #14]
 800417e:	6183      	str	r3, [r0, #24]
 8004180:	4619      	mov	r1, r3
 8004182:	2208      	movs	r2, #8
 8004184:	305c      	adds	r0, #92	@ 0x5c
 8004186:	f000 f8f4 	bl	8004372 <memset>
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <std+0x58>)
 800418c:	6224      	str	r4, [r4, #32]
 800418e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004190:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <std+0x5c>)
 8004192:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <std+0x60>)
 8004196:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <std+0x64>)
 800419a:	6323      	str	r3, [r4, #48]	@ 0x30
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <std+0x68>)
 800419e:	429c      	cmp	r4, r3
 80041a0:	d006      	beq.n	80041b0 <std+0x48>
 80041a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041a6:	4294      	cmp	r4, r2
 80041a8:	d002      	beq.n	80041b0 <std+0x48>
 80041aa:	33d0      	adds	r3, #208	@ 0xd0
 80041ac:	429c      	cmp	r4, r3
 80041ae:	d105      	bne.n	80041bc <std+0x54>
 80041b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b8:	f000 b954 	b.w	8004464 <__retarget_lock_init_recursive>
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	bf00      	nop
 80041c0:	080042ed 	.word	0x080042ed
 80041c4:	0800430f 	.word	0x0800430f
 80041c8:	08004347 	.word	0x08004347
 80041cc:	0800436b 	.word	0x0800436b
 80041d0:	2000021c 	.word	0x2000021c

080041d4 <stdio_exit_handler>:
 80041d4:	4a02      	ldr	r2, [pc, #8]	@ (80041e0 <stdio_exit_handler+0xc>)
 80041d6:	4903      	ldr	r1, [pc, #12]	@ (80041e4 <stdio_exit_handler+0x10>)
 80041d8:	4803      	ldr	r0, [pc, #12]	@ (80041e8 <stdio_exit_handler+0x14>)
 80041da:	f000 b869 	b.w	80042b0 <_fwalk_sglue>
 80041de:	bf00      	nop
 80041e0:	20000014 	.word	0x20000014
 80041e4:	080047a5 	.word	0x080047a5
 80041e8:	20000024 	.word	0x20000024

080041ec <cleanup_stdio>:
 80041ec:	6841      	ldr	r1, [r0, #4]
 80041ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <cleanup_stdio+0x34>)
 80041f0:	b510      	push	{r4, lr}
 80041f2:	4299      	cmp	r1, r3
 80041f4:	4604      	mov	r4, r0
 80041f6:	d001      	beq.n	80041fc <cleanup_stdio+0x10>
 80041f8:	f000 fad4 	bl	80047a4 <_fflush_r>
 80041fc:	68a1      	ldr	r1, [r4, #8]
 80041fe:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <cleanup_stdio+0x38>)
 8004200:	4299      	cmp	r1, r3
 8004202:	d002      	beq.n	800420a <cleanup_stdio+0x1e>
 8004204:	4620      	mov	r0, r4
 8004206:	f000 facd 	bl	80047a4 <_fflush_r>
 800420a:	68e1      	ldr	r1, [r4, #12]
 800420c:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <cleanup_stdio+0x3c>)
 800420e:	4299      	cmp	r1, r3
 8004210:	d004      	beq.n	800421c <cleanup_stdio+0x30>
 8004212:	4620      	mov	r0, r4
 8004214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004218:	f000 bac4 	b.w	80047a4 <_fflush_r>
 800421c:	bd10      	pop	{r4, pc}
 800421e:	bf00      	nop
 8004220:	2000021c 	.word	0x2000021c
 8004224:	20000284 	.word	0x20000284
 8004228:	200002ec 	.word	0x200002ec

0800422c <global_stdio_init.part.0>:
 800422c:	b510      	push	{r4, lr}
 800422e:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <global_stdio_init.part.0+0x30>)
 8004230:	4c0b      	ldr	r4, [pc, #44]	@ (8004260 <global_stdio_init.part.0+0x34>)
 8004232:	4a0c      	ldr	r2, [pc, #48]	@ (8004264 <global_stdio_init.part.0+0x38>)
 8004234:	4620      	mov	r0, r4
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	2104      	movs	r1, #4
 800423a:	2200      	movs	r2, #0
 800423c:	f7ff ff94 	bl	8004168 <std>
 8004240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004244:	2201      	movs	r2, #1
 8004246:	2109      	movs	r1, #9
 8004248:	f7ff ff8e 	bl	8004168 <std>
 800424c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004250:	2202      	movs	r2, #2
 8004252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004256:	2112      	movs	r1, #18
 8004258:	f7ff bf86 	b.w	8004168 <std>
 800425c:	20000354 	.word	0x20000354
 8004260:	2000021c 	.word	0x2000021c
 8004264:	080041d5 	.word	0x080041d5

08004268 <__sfp_lock_acquire>:
 8004268:	4801      	ldr	r0, [pc, #4]	@ (8004270 <__sfp_lock_acquire+0x8>)
 800426a:	f000 b8fc 	b.w	8004466 <__retarget_lock_acquire_recursive>
 800426e:	bf00      	nop
 8004270:	2000035d 	.word	0x2000035d

08004274 <__sfp_lock_release>:
 8004274:	4801      	ldr	r0, [pc, #4]	@ (800427c <__sfp_lock_release+0x8>)
 8004276:	f000 b8f7 	b.w	8004468 <__retarget_lock_release_recursive>
 800427a:	bf00      	nop
 800427c:	2000035d 	.word	0x2000035d

08004280 <__sinit>:
 8004280:	b510      	push	{r4, lr}
 8004282:	4604      	mov	r4, r0
 8004284:	f7ff fff0 	bl	8004268 <__sfp_lock_acquire>
 8004288:	6a23      	ldr	r3, [r4, #32]
 800428a:	b11b      	cbz	r3, 8004294 <__sinit+0x14>
 800428c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004290:	f7ff bff0 	b.w	8004274 <__sfp_lock_release>
 8004294:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <__sinit+0x28>)
 8004296:	6223      	str	r3, [r4, #32]
 8004298:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <__sinit+0x2c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f5      	bne.n	800428c <__sinit+0xc>
 80042a0:	f7ff ffc4 	bl	800422c <global_stdio_init.part.0>
 80042a4:	e7f2      	b.n	800428c <__sinit+0xc>
 80042a6:	bf00      	nop
 80042a8:	080041ed 	.word	0x080041ed
 80042ac:	20000354 	.word	0x20000354

080042b0 <_fwalk_sglue>:
 80042b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b4:	4607      	mov	r7, r0
 80042b6:	4688      	mov	r8, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	2600      	movs	r6, #0
 80042bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042c0:	f1b9 0901 	subs.w	r9, r9, #1
 80042c4:	d505      	bpl.n	80042d2 <_fwalk_sglue+0x22>
 80042c6:	6824      	ldr	r4, [r4, #0]
 80042c8:	2c00      	cmp	r4, #0
 80042ca:	d1f7      	bne.n	80042bc <_fwalk_sglue+0xc>
 80042cc:	4630      	mov	r0, r6
 80042ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d2:	89ab      	ldrh	r3, [r5, #12]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d907      	bls.n	80042e8 <_fwalk_sglue+0x38>
 80042d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042dc:	3301      	adds	r3, #1
 80042de:	d003      	beq.n	80042e8 <_fwalk_sglue+0x38>
 80042e0:	4629      	mov	r1, r5
 80042e2:	4638      	mov	r0, r7
 80042e4:	47c0      	blx	r8
 80042e6:	4306      	orrs	r6, r0
 80042e8:	3568      	adds	r5, #104	@ 0x68
 80042ea:	e7e9      	b.n	80042c0 <_fwalk_sglue+0x10>

080042ec <__sread>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	460c      	mov	r4, r1
 80042f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f4:	f000 f868 	bl	80043c8 <_read_r>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	bfab      	itete	ge
 80042fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004300:	181b      	addge	r3, r3, r0
 8004302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004306:	bfac      	ite	ge
 8004308:	6563      	strge	r3, [r4, #84]	@ 0x54
 800430a:	81a3      	strhlt	r3, [r4, #12]
 800430c:	bd10      	pop	{r4, pc}

0800430e <__swrite>:
 800430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004312:	461f      	mov	r7, r3
 8004314:	898b      	ldrh	r3, [r1, #12]
 8004316:	4605      	mov	r5, r0
 8004318:	05db      	lsls	r3, r3, #23
 800431a:	460c      	mov	r4, r1
 800431c:	4616      	mov	r6, r2
 800431e:	d505      	bpl.n	800432c <__swrite+0x1e>
 8004320:	2302      	movs	r3, #2
 8004322:	2200      	movs	r2, #0
 8004324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004328:	f000 f83c 	bl	80043a4 <_lseek_r>
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	4632      	mov	r2, r6
 8004330:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	4628      	mov	r0, r5
 8004338:	463b      	mov	r3, r7
 800433a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004342:	f000 b853 	b.w	80043ec <_write_r>

08004346 <__sseek>:
 8004346:	b510      	push	{r4, lr}
 8004348:	460c      	mov	r4, r1
 800434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434e:	f000 f829 	bl	80043a4 <_lseek_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	bf15      	itete	ne
 8004358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800435a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800435e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004362:	81a3      	strheq	r3, [r4, #12]
 8004364:	bf18      	it	ne
 8004366:	81a3      	strhne	r3, [r4, #12]
 8004368:	bd10      	pop	{r4, pc}

0800436a <__sclose>:
 800436a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436e:	f000 b809 	b.w	8004384 <_close_r>

08004372 <memset>:
 8004372:	4603      	mov	r3, r0
 8004374:	4402      	add	r2, r0
 8004376:	4293      	cmp	r3, r2
 8004378:	d100      	bne.n	800437c <memset+0xa>
 800437a:	4770      	bx	lr
 800437c:	f803 1b01 	strb.w	r1, [r3], #1
 8004380:	e7f9      	b.n	8004376 <memset+0x4>
	...

08004384 <_close_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	2300      	movs	r3, #0
 8004388:	4d05      	ldr	r5, [pc, #20]	@ (80043a0 <_close_r+0x1c>)
 800438a:	4604      	mov	r4, r0
 800438c:	4608      	mov	r0, r1
 800438e:	602b      	str	r3, [r5, #0]
 8004390:	f7fd fb45 	bl	8001a1e <_close>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_close_r+0x1a>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_close_r+0x1a>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000358 	.word	0x20000358

080043a4 <_lseek_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	2200      	movs	r2, #0
 80043ae:	4d05      	ldr	r5, [pc, #20]	@ (80043c4 <_lseek_r+0x20>)
 80043b0:	602a      	str	r2, [r5, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7fd fb57 	bl	8001a66 <_lseek>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_lseek_r+0x1e>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_lseek_r+0x1e>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	20000358 	.word	0x20000358

080043c8 <_read_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	2200      	movs	r2, #0
 80043d2:	4d05      	ldr	r5, [pc, #20]	@ (80043e8 <_read_r+0x20>)
 80043d4:	602a      	str	r2, [r5, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f7fd fae8 	bl	80019ac <_read>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_read_r+0x1e>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_read_r+0x1e>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000358 	.word	0x20000358

080043ec <_write_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	2200      	movs	r2, #0
 80043f6:	4d05      	ldr	r5, [pc, #20]	@ (800440c <_write_r+0x20>)
 80043f8:	602a      	str	r2, [r5, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7fd faf3 	bl	80019e6 <_write>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_write_r+0x1e>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	b103      	cbz	r3, 800440a <_write_r+0x1e>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	20000358 	.word	0x20000358

08004410 <__errno>:
 8004410:	4b01      	ldr	r3, [pc, #4]	@ (8004418 <__errno+0x8>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000020 	.word	0x20000020

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	2600      	movs	r6, #0
 8004420:	4d0c      	ldr	r5, [pc, #48]	@ (8004454 <__libc_init_array+0x38>)
 8004422:	4c0d      	ldr	r4, [pc, #52]	@ (8004458 <__libc_init_array+0x3c>)
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	f000 fe46 	bl	80050bc <_init>
 8004430:	2600      	movs	r6, #0
 8004432:	4d0a      	ldr	r5, [pc, #40]	@ (800445c <__libc_init_array+0x40>)
 8004434:	4c0a      	ldr	r4, [pc, #40]	@ (8004460 <__libc_init_array+0x44>)
 8004436:	1b64      	subs	r4, r4, r5
 8004438:	10a4      	asrs	r4, r4, #2
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	f855 3b04 	ldr.w	r3, [r5], #4
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	f855 3b04 	ldr.w	r3, [r5], #4
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	080051f0 	.word	0x080051f0
 8004458:	080051f0 	.word	0x080051f0
 800445c:	080051f0 	.word	0x080051f0
 8004460:	080051f4 	.word	0x080051f4

08004464 <__retarget_lock_init_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_acquire_recursive>:
 8004466:	4770      	bx	lr

08004468 <__retarget_lock_release_recursive>:
 8004468:	4770      	bx	lr
	...

0800446c <__assert_func>:
 800446c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800446e:	4614      	mov	r4, r2
 8004470:	461a      	mov	r2, r3
 8004472:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <__assert_func+0x2c>)
 8004474:	4605      	mov	r5, r0
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68d8      	ldr	r0, [r3, #12]
 800447a:	b954      	cbnz	r4, 8004492 <__assert_func+0x26>
 800447c:	4b07      	ldr	r3, [pc, #28]	@ (800449c <__assert_func+0x30>)
 800447e:	461c      	mov	r4, r3
 8004480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004484:	9100      	str	r1, [sp, #0]
 8004486:	462b      	mov	r3, r5
 8004488:	4905      	ldr	r1, [pc, #20]	@ (80044a0 <__assert_func+0x34>)
 800448a:	f000 f9b3 	bl	80047f4 <fiprintf>
 800448e:	f000 f9d3 	bl	8004838 <abort>
 8004492:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <__assert_func+0x38>)
 8004494:	e7f4      	b.n	8004480 <__assert_func+0x14>
 8004496:	bf00      	nop
 8004498:	20000020 	.word	0x20000020
 800449c:	080051bc 	.word	0x080051bc
 80044a0:	0800518e 	.word	0x0800518e
 80044a4:	08005181 	.word	0x08005181

080044a8 <_free_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4605      	mov	r5, r0
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d040      	beq.n	8004532 <_free_r+0x8a>
 80044b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b4:	1f0c      	subs	r4, r1, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bfb8      	it	lt
 80044ba:	18e4      	addlt	r4, r4, r3
 80044bc:	f000 f8e6 	bl	800468c <__malloc_lock>
 80044c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004534 <_free_r+0x8c>)
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	b933      	cbnz	r3, 80044d4 <_free_r+0x2c>
 80044c6:	6063      	str	r3, [r4, #4]
 80044c8:	6014      	str	r4, [r2, #0]
 80044ca:	4628      	mov	r0, r5
 80044cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d0:	f000 b8e2 	b.w	8004698 <__malloc_unlock>
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	d908      	bls.n	80044ea <_free_r+0x42>
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	1821      	adds	r1, r4, r0
 80044dc:	428b      	cmp	r3, r1
 80044de:	bf01      	itttt	eq
 80044e0:	6819      	ldreq	r1, [r3, #0]
 80044e2:	685b      	ldreq	r3, [r3, #4]
 80044e4:	1809      	addeq	r1, r1, r0
 80044e6:	6021      	streq	r1, [r4, #0]
 80044e8:	e7ed      	b.n	80044c6 <_free_r+0x1e>
 80044ea:	461a      	mov	r2, r3
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b10b      	cbz	r3, 80044f4 <_free_r+0x4c>
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d9fa      	bls.n	80044ea <_free_r+0x42>
 80044f4:	6811      	ldr	r1, [r2, #0]
 80044f6:	1850      	adds	r0, r2, r1
 80044f8:	42a0      	cmp	r0, r4
 80044fa:	d10b      	bne.n	8004514 <_free_r+0x6c>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	4401      	add	r1, r0
 8004500:	1850      	adds	r0, r2, r1
 8004502:	4283      	cmp	r3, r0
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	d1e0      	bne.n	80044ca <_free_r+0x22>
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4408      	add	r0, r1
 800450e:	6010      	str	r0, [r2, #0]
 8004510:	6053      	str	r3, [r2, #4]
 8004512:	e7da      	b.n	80044ca <_free_r+0x22>
 8004514:	d902      	bls.n	800451c <_free_r+0x74>
 8004516:	230c      	movs	r3, #12
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	e7d6      	b.n	80044ca <_free_r+0x22>
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	1821      	adds	r1, r4, r0
 8004520:	428b      	cmp	r3, r1
 8004522:	bf01      	itttt	eq
 8004524:	6819      	ldreq	r1, [r3, #0]
 8004526:	685b      	ldreq	r3, [r3, #4]
 8004528:	1809      	addeq	r1, r1, r0
 800452a:	6021      	streq	r1, [r4, #0]
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	6054      	str	r4, [r2, #4]
 8004530:	e7cb      	b.n	80044ca <_free_r+0x22>
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000364 	.word	0x20000364

08004538 <malloc>:
 8004538:	4b02      	ldr	r3, [pc, #8]	@ (8004544 <malloc+0xc>)
 800453a:	4601      	mov	r1, r0
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f000 b825 	b.w	800458c <_malloc_r>
 8004542:	bf00      	nop
 8004544:	20000020 	.word	0x20000020

08004548 <sbrk_aligned>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	4e0f      	ldr	r6, [pc, #60]	@ (8004588 <sbrk_aligned+0x40>)
 800454c:	460c      	mov	r4, r1
 800454e:	6831      	ldr	r1, [r6, #0]
 8004550:	4605      	mov	r5, r0
 8004552:	b911      	cbnz	r1, 800455a <sbrk_aligned+0x12>
 8004554:	f000 f960 	bl	8004818 <_sbrk_r>
 8004558:	6030      	str	r0, [r6, #0]
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f95b 	bl	8004818 <_sbrk_r>
 8004562:	1c43      	adds	r3, r0, #1
 8004564:	d103      	bne.n	800456e <sbrk_aligned+0x26>
 8004566:	f04f 34ff 	mov.w	r4, #4294967295
 800456a:	4620      	mov	r0, r4
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	1cc4      	adds	r4, r0, #3
 8004570:	f024 0403 	bic.w	r4, r4, #3
 8004574:	42a0      	cmp	r0, r4
 8004576:	d0f8      	beq.n	800456a <sbrk_aligned+0x22>
 8004578:	1a21      	subs	r1, r4, r0
 800457a:	4628      	mov	r0, r5
 800457c:	f000 f94c 	bl	8004818 <_sbrk_r>
 8004580:	3001      	adds	r0, #1
 8004582:	d1f2      	bne.n	800456a <sbrk_aligned+0x22>
 8004584:	e7ef      	b.n	8004566 <sbrk_aligned+0x1e>
 8004586:	bf00      	nop
 8004588:	20000360 	.word	0x20000360

0800458c <_malloc_r>:
 800458c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004590:	1ccd      	adds	r5, r1, #3
 8004592:	f025 0503 	bic.w	r5, r5, #3
 8004596:	3508      	adds	r5, #8
 8004598:	2d0c      	cmp	r5, #12
 800459a:	bf38      	it	cc
 800459c:	250c      	movcc	r5, #12
 800459e:	2d00      	cmp	r5, #0
 80045a0:	4606      	mov	r6, r0
 80045a2:	db01      	blt.n	80045a8 <_malloc_r+0x1c>
 80045a4:	42a9      	cmp	r1, r5
 80045a6:	d904      	bls.n	80045b2 <_malloc_r+0x26>
 80045a8:	230c      	movs	r3, #12
 80045aa:	6033      	str	r3, [r6, #0]
 80045ac:	2000      	movs	r0, #0
 80045ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004688 <_malloc_r+0xfc>
 80045b6:	f000 f869 	bl	800468c <__malloc_lock>
 80045ba:	f8d8 3000 	ldr.w	r3, [r8]
 80045be:	461c      	mov	r4, r3
 80045c0:	bb44      	cbnz	r4, 8004614 <_malloc_r+0x88>
 80045c2:	4629      	mov	r1, r5
 80045c4:	4630      	mov	r0, r6
 80045c6:	f7ff ffbf 	bl	8004548 <sbrk_aligned>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	4604      	mov	r4, r0
 80045ce:	d158      	bne.n	8004682 <_malloc_r+0xf6>
 80045d0:	f8d8 4000 	ldr.w	r4, [r8]
 80045d4:	4627      	mov	r7, r4
 80045d6:	2f00      	cmp	r7, #0
 80045d8:	d143      	bne.n	8004662 <_malloc_r+0xd6>
 80045da:	2c00      	cmp	r4, #0
 80045dc:	d04b      	beq.n	8004676 <_malloc_r+0xea>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	4639      	mov	r1, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	eb04 0903 	add.w	r9, r4, r3
 80045e8:	f000 f916 	bl	8004818 <_sbrk_r>
 80045ec:	4581      	cmp	r9, r0
 80045ee:	d142      	bne.n	8004676 <_malloc_r+0xea>
 80045f0:	6821      	ldr	r1, [r4, #0]
 80045f2:	4630      	mov	r0, r6
 80045f4:	1a6d      	subs	r5, r5, r1
 80045f6:	4629      	mov	r1, r5
 80045f8:	f7ff ffa6 	bl	8004548 <sbrk_aligned>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d03a      	beq.n	8004676 <_malloc_r+0xea>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	442b      	add	r3, r5
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	f8d8 3000 	ldr.w	r3, [r8]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	bb62      	cbnz	r2, 8004668 <_malloc_r+0xdc>
 800460e:	f8c8 7000 	str.w	r7, [r8]
 8004612:	e00f      	b.n	8004634 <_malloc_r+0xa8>
 8004614:	6822      	ldr	r2, [r4, #0]
 8004616:	1b52      	subs	r2, r2, r5
 8004618:	d420      	bmi.n	800465c <_malloc_r+0xd0>
 800461a:	2a0b      	cmp	r2, #11
 800461c:	d917      	bls.n	800464e <_malloc_r+0xc2>
 800461e:	1961      	adds	r1, r4, r5
 8004620:	42a3      	cmp	r3, r4
 8004622:	6025      	str	r5, [r4, #0]
 8004624:	bf18      	it	ne
 8004626:	6059      	strne	r1, [r3, #4]
 8004628:	6863      	ldr	r3, [r4, #4]
 800462a:	bf08      	it	eq
 800462c:	f8c8 1000 	streq.w	r1, [r8]
 8004630:	5162      	str	r2, [r4, r5]
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f82f 	bl	8004698 <__malloc_unlock>
 800463a:	f104 000b 	add.w	r0, r4, #11
 800463e:	1d23      	adds	r3, r4, #4
 8004640:	f020 0007 	bic.w	r0, r0, #7
 8004644:	1ac2      	subs	r2, r0, r3
 8004646:	bf1c      	itt	ne
 8004648:	1a1b      	subne	r3, r3, r0
 800464a:	50a3      	strne	r3, [r4, r2]
 800464c:	e7af      	b.n	80045ae <_malloc_r+0x22>
 800464e:	6862      	ldr	r2, [r4, #4]
 8004650:	42a3      	cmp	r3, r4
 8004652:	bf0c      	ite	eq
 8004654:	f8c8 2000 	streq.w	r2, [r8]
 8004658:	605a      	strne	r2, [r3, #4]
 800465a:	e7eb      	b.n	8004634 <_malloc_r+0xa8>
 800465c:	4623      	mov	r3, r4
 800465e:	6864      	ldr	r4, [r4, #4]
 8004660:	e7ae      	b.n	80045c0 <_malloc_r+0x34>
 8004662:	463c      	mov	r4, r7
 8004664:	687f      	ldr	r7, [r7, #4]
 8004666:	e7b6      	b.n	80045d6 <_malloc_r+0x4a>
 8004668:	461a      	mov	r2, r3
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	42a3      	cmp	r3, r4
 800466e:	d1fb      	bne.n	8004668 <_malloc_r+0xdc>
 8004670:	2300      	movs	r3, #0
 8004672:	6053      	str	r3, [r2, #4]
 8004674:	e7de      	b.n	8004634 <_malloc_r+0xa8>
 8004676:	230c      	movs	r3, #12
 8004678:	4630      	mov	r0, r6
 800467a:	6033      	str	r3, [r6, #0]
 800467c:	f000 f80c 	bl	8004698 <__malloc_unlock>
 8004680:	e794      	b.n	80045ac <_malloc_r+0x20>
 8004682:	6005      	str	r5, [r0, #0]
 8004684:	e7d6      	b.n	8004634 <_malloc_r+0xa8>
 8004686:	bf00      	nop
 8004688:	20000364 	.word	0x20000364

0800468c <__malloc_lock>:
 800468c:	4801      	ldr	r0, [pc, #4]	@ (8004694 <__malloc_lock+0x8>)
 800468e:	f7ff beea 	b.w	8004466 <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	2000035c 	.word	0x2000035c

08004698 <__malloc_unlock>:
 8004698:	4801      	ldr	r0, [pc, #4]	@ (80046a0 <__malloc_unlock+0x8>)
 800469a:	f7ff bee5 	b.w	8004468 <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	2000035c 	.word	0x2000035c

080046a4 <__sflush_r>:
 80046a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	0716      	lsls	r6, r2, #28
 80046ac:	4605      	mov	r5, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	d454      	bmi.n	800475c <__sflush_r+0xb8>
 80046b2:	684b      	ldr	r3, [r1, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	dc02      	bgt.n	80046be <__sflush_r+0x1a>
 80046b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	dd48      	ble.n	8004750 <__sflush_r+0xac>
 80046be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046c0:	2e00      	cmp	r6, #0
 80046c2:	d045      	beq.n	8004750 <__sflush_r+0xac>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046ca:	682f      	ldr	r7, [r5, #0]
 80046cc:	6a21      	ldr	r1, [r4, #32]
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	d030      	beq.n	8004734 <__sflush_r+0x90>
 80046d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	0759      	lsls	r1, r3, #29
 80046d8:	d505      	bpl.n	80046e6 <__sflush_r+0x42>
 80046da:	6863      	ldr	r3, [r4, #4]
 80046dc:	1ad2      	subs	r2, r2, r3
 80046de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046e0:	b10b      	cbz	r3, 80046e6 <__sflush_r+0x42>
 80046e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046e4:	1ad2      	subs	r2, r2, r3
 80046e6:	2300      	movs	r3, #0
 80046e8:	4628      	mov	r0, r5
 80046ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046ec:	6a21      	ldr	r1, [r4, #32]
 80046ee:	47b0      	blx	r6
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	d106      	bne.n	8004704 <__sflush_r+0x60>
 80046f6:	6829      	ldr	r1, [r5, #0]
 80046f8:	291d      	cmp	r1, #29
 80046fa:	d82b      	bhi.n	8004754 <__sflush_r+0xb0>
 80046fc:	4a28      	ldr	r2, [pc, #160]	@ (80047a0 <__sflush_r+0xfc>)
 80046fe:	410a      	asrs	r2, r1
 8004700:	07d6      	lsls	r6, r2, #31
 8004702:	d427      	bmi.n	8004754 <__sflush_r+0xb0>
 8004704:	2200      	movs	r2, #0
 8004706:	6062      	str	r2, [r4, #4]
 8004708:	6922      	ldr	r2, [r4, #16]
 800470a:	04d9      	lsls	r1, r3, #19
 800470c:	6022      	str	r2, [r4, #0]
 800470e:	d504      	bpl.n	800471a <__sflush_r+0x76>
 8004710:	1c42      	adds	r2, r0, #1
 8004712:	d101      	bne.n	8004718 <__sflush_r+0x74>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b903      	cbnz	r3, 800471a <__sflush_r+0x76>
 8004718:	6560      	str	r0, [r4, #84]	@ 0x54
 800471a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800471c:	602f      	str	r7, [r5, #0]
 800471e:	b1b9      	cbz	r1, 8004750 <__sflush_r+0xac>
 8004720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004724:	4299      	cmp	r1, r3
 8004726:	d002      	beq.n	800472e <__sflush_r+0x8a>
 8004728:	4628      	mov	r0, r5
 800472a:	f7ff febd 	bl	80044a8 <_free_r>
 800472e:	2300      	movs	r3, #0
 8004730:	6363      	str	r3, [r4, #52]	@ 0x34
 8004732:	e00d      	b.n	8004750 <__sflush_r+0xac>
 8004734:	2301      	movs	r3, #1
 8004736:	4628      	mov	r0, r5
 8004738:	47b0      	blx	r6
 800473a:	4602      	mov	r2, r0
 800473c:	1c50      	adds	r0, r2, #1
 800473e:	d1c9      	bne.n	80046d4 <__sflush_r+0x30>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0c6      	beq.n	80046d4 <__sflush_r+0x30>
 8004746:	2b1d      	cmp	r3, #29
 8004748:	d001      	beq.n	800474e <__sflush_r+0xaa>
 800474a:	2b16      	cmp	r3, #22
 800474c:	d11d      	bne.n	800478a <__sflush_r+0xe6>
 800474e:	602f      	str	r7, [r5, #0]
 8004750:	2000      	movs	r0, #0
 8004752:	e021      	b.n	8004798 <__sflush_r+0xf4>
 8004754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004758:	b21b      	sxth	r3, r3
 800475a:	e01a      	b.n	8004792 <__sflush_r+0xee>
 800475c:	690f      	ldr	r7, [r1, #16]
 800475e:	2f00      	cmp	r7, #0
 8004760:	d0f6      	beq.n	8004750 <__sflush_r+0xac>
 8004762:	0793      	lsls	r3, r2, #30
 8004764:	bf18      	it	ne
 8004766:	2300      	movne	r3, #0
 8004768:	680e      	ldr	r6, [r1, #0]
 800476a:	bf08      	it	eq
 800476c:	694b      	ldreq	r3, [r1, #20]
 800476e:	1bf6      	subs	r6, r6, r7
 8004770:	600f      	str	r7, [r1, #0]
 8004772:	608b      	str	r3, [r1, #8]
 8004774:	2e00      	cmp	r6, #0
 8004776:	ddeb      	ble.n	8004750 <__sflush_r+0xac>
 8004778:	4633      	mov	r3, r6
 800477a:	463a      	mov	r2, r7
 800477c:	4628      	mov	r0, r5
 800477e:	6a21      	ldr	r1, [r4, #32]
 8004780:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004784:	47e0      	blx	ip
 8004786:	2800      	cmp	r0, #0
 8004788:	dc07      	bgt.n	800479a <__sflush_r+0xf6>
 800478a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800478e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	81a3      	strh	r3, [r4, #12]
 8004798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479a:	4407      	add	r7, r0
 800479c:	1a36      	subs	r6, r6, r0
 800479e:	e7e9      	b.n	8004774 <__sflush_r+0xd0>
 80047a0:	dfbffffe 	.word	0xdfbffffe

080047a4 <_fflush_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	690b      	ldr	r3, [r1, #16]
 80047a8:	4605      	mov	r5, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	b913      	cbnz	r3, 80047b4 <_fflush_r+0x10>
 80047ae:	2500      	movs	r5, #0
 80047b0:	4628      	mov	r0, r5
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	b118      	cbz	r0, 80047be <_fflush_r+0x1a>
 80047b6:	6a03      	ldr	r3, [r0, #32]
 80047b8:	b90b      	cbnz	r3, 80047be <_fflush_r+0x1a>
 80047ba:	f7ff fd61 	bl	8004280 <__sinit>
 80047be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f3      	beq.n	80047ae <_fflush_r+0xa>
 80047c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047c8:	07d0      	lsls	r0, r2, #31
 80047ca:	d404      	bmi.n	80047d6 <_fflush_r+0x32>
 80047cc:	0599      	lsls	r1, r3, #22
 80047ce:	d402      	bmi.n	80047d6 <_fflush_r+0x32>
 80047d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047d2:	f7ff fe48 	bl	8004466 <__retarget_lock_acquire_recursive>
 80047d6:	4628      	mov	r0, r5
 80047d8:	4621      	mov	r1, r4
 80047da:	f7ff ff63 	bl	80046a4 <__sflush_r>
 80047de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047e0:	4605      	mov	r5, r0
 80047e2:	07da      	lsls	r2, r3, #31
 80047e4:	d4e4      	bmi.n	80047b0 <_fflush_r+0xc>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	059b      	lsls	r3, r3, #22
 80047ea:	d4e1      	bmi.n	80047b0 <_fflush_r+0xc>
 80047ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ee:	f7ff fe3b 	bl	8004468 <__retarget_lock_release_recursive>
 80047f2:	e7dd      	b.n	80047b0 <_fflush_r+0xc>

080047f4 <fiprintf>:
 80047f4:	b40e      	push	{r1, r2, r3}
 80047f6:	b503      	push	{r0, r1, lr}
 80047f8:	4601      	mov	r1, r0
 80047fa:	ab03      	add	r3, sp, #12
 80047fc:	4805      	ldr	r0, [pc, #20]	@ (8004814 <fiprintf+0x20>)
 80047fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004802:	6800      	ldr	r0, [r0, #0]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	f000 f845 	bl	8004894 <_vfiprintf_r>
 800480a:	b002      	add	sp, #8
 800480c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004810:	b003      	add	sp, #12
 8004812:	4770      	bx	lr
 8004814:	20000020 	.word	0x20000020

08004818 <_sbrk_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	2300      	movs	r3, #0
 800481c:	4d05      	ldr	r5, [pc, #20]	@ (8004834 <_sbrk_r+0x1c>)
 800481e:	4604      	mov	r4, r0
 8004820:	4608      	mov	r0, r1
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	f7fd f92c 	bl	8001a80 <_sbrk>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_sbrk_r+0x1a>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	b103      	cbz	r3, 8004832 <_sbrk_r+0x1a>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	20000358 	.word	0x20000358

08004838 <abort>:
 8004838:	2006      	movs	r0, #6
 800483a:	b508      	push	{r3, lr}
 800483c:	f000 fb90 	bl	8004f60 <raise>
 8004840:	2001      	movs	r0, #1
 8004842:	f7fd f8a8 	bl	8001996 <_exit>

08004846 <__sfputc_r>:
 8004846:	6893      	ldr	r3, [r2, #8]
 8004848:	b410      	push	{r4}
 800484a:	3b01      	subs	r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	6093      	str	r3, [r2, #8]
 8004850:	da07      	bge.n	8004862 <__sfputc_r+0x1c>
 8004852:	6994      	ldr	r4, [r2, #24]
 8004854:	42a3      	cmp	r3, r4
 8004856:	db01      	blt.n	800485c <__sfputc_r+0x16>
 8004858:	290a      	cmp	r1, #10
 800485a:	d102      	bne.n	8004862 <__sfputc_r+0x1c>
 800485c:	bc10      	pop	{r4}
 800485e:	f000 bac3 	b.w	8004de8 <__swbuf_r>
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	1c58      	adds	r0, r3, #1
 8004866:	6010      	str	r0, [r2, #0]
 8004868:	7019      	strb	r1, [r3, #0]
 800486a:	4608      	mov	r0, r1
 800486c:	bc10      	pop	{r4}
 800486e:	4770      	bx	lr

08004870 <__sfputs_r>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	4606      	mov	r6, r0
 8004874:	460f      	mov	r7, r1
 8004876:	4614      	mov	r4, r2
 8004878:	18d5      	adds	r5, r2, r3
 800487a:	42ac      	cmp	r4, r5
 800487c:	d101      	bne.n	8004882 <__sfputs_r+0x12>
 800487e:	2000      	movs	r0, #0
 8004880:	e007      	b.n	8004892 <__sfputs_r+0x22>
 8004882:	463a      	mov	r2, r7
 8004884:	4630      	mov	r0, r6
 8004886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488a:	f7ff ffdc 	bl	8004846 <__sfputc_r>
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	d1f3      	bne.n	800487a <__sfputs_r+0xa>
 8004892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004894 <_vfiprintf_r>:
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	460d      	mov	r5, r1
 800489a:	4614      	mov	r4, r2
 800489c:	4698      	mov	r8, r3
 800489e:	4606      	mov	r6, r0
 80048a0:	b09d      	sub	sp, #116	@ 0x74
 80048a2:	b118      	cbz	r0, 80048ac <_vfiprintf_r+0x18>
 80048a4:	6a03      	ldr	r3, [r0, #32]
 80048a6:	b90b      	cbnz	r3, 80048ac <_vfiprintf_r+0x18>
 80048a8:	f7ff fcea 	bl	8004280 <__sinit>
 80048ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048ae:	07d9      	lsls	r1, r3, #31
 80048b0:	d405      	bmi.n	80048be <_vfiprintf_r+0x2a>
 80048b2:	89ab      	ldrh	r3, [r5, #12]
 80048b4:	059a      	lsls	r2, r3, #22
 80048b6:	d402      	bmi.n	80048be <_vfiprintf_r+0x2a>
 80048b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048ba:	f7ff fdd4 	bl	8004466 <__retarget_lock_acquire_recursive>
 80048be:	89ab      	ldrh	r3, [r5, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	d501      	bpl.n	80048c8 <_vfiprintf_r+0x34>
 80048c4:	692b      	ldr	r3, [r5, #16]
 80048c6:	b99b      	cbnz	r3, 80048f0 <_vfiprintf_r+0x5c>
 80048c8:	4629      	mov	r1, r5
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 faca 	bl	8004e64 <__swsetup_r>
 80048d0:	b170      	cbz	r0, 80048f0 <_vfiprintf_r+0x5c>
 80048d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048d4:	07dc      	lsls	r4, r3, #31
 80048d6:	d504      	bpl.n	80048e2 <_vfiprintf_r+0x4e>
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	b01d      	add	sp, #116	@ 0x74
 80048de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e2:	89ab      	ldrh	r3, [r5, #12]
 80048e4:	0598      	lsls	r0, r3, #22
 80048e6:	d4f7      	bmi.n	80048d8 <_vfiprintf_r+0x44>
 80048e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048ea:	f7ff fdbd 	bl	8004468 <__retarget_lock_release_recursive>
 80048ee:	e7f3      	b.n	80048d8 <_vfiprintf_r+0x44>
 80048f0:	2300      	movs	r3, #0
 80048f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80048f4:	2320      	movs	r3, #32
 80048f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048fa:	2330      	movs	r3, #48	@ 0x30
 80048fc:	f04f 0901 	mov.w	r9, #1
 8004900:	f8cd 800c 	str.w	r8, [sp, #12]
 8004904:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004ab0 <_vfiprintf_r+0x21c>
 8004908:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800490c:	4623      	mov	r3, r4
 800490e:	469a      	mov	sl, r3
 8004910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004914:	b10a      	cbz	r2, 800491a <_vfiprintf_r+0x86>
 8004916:	2a25      	cmp	r2, #37	@ 0x25
 8004918:	d1f9      	bne.n	800490e <_vfiprintf_r+0x7a>
 800491a:	ebba 0b04 	subs.w	fp, sl, r4
 800491e:	d00b      	beq.n	8004938 <_vfiprintf_r+0xa4>
 8004920:	465b      	mov	r3, fp
 8004922:	4622      	mov	r2, r4
 8004924:	4629      	mov	r1, r5
 8004926:	4630      	mov	r0, r6
 8004928:	f7ff ffa2 	bl	8004870 <__sfputs_r>
 800492c:	3001      	adds	r0, #1
 800492e:	f000 80a7 	beq.w	8004a80 <_vfiprintf_r+0x1ec>
 8004932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004934:	445a      	add	r2, fp
 8004936:	9209      	str	r2, [sp, #36]	@ 0x24
 8004938:	f89a 3000 	ldrb.w	r3, [sl]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 809f 	beq.w	8004a80 <_vfiprintf_r+0x1ec>
 8004942:	2300      	movs	r3, #0
 8004944:	f04f 32ff 	mov.w	r2, #4294967295
 8004948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800494c:	f10a 0a01 	add.w	sl, sl, #1
 8004950:	9304      	str	r3, [sp, #16]
 8004952:	9307      	str	r3, [sp, #28]
 8004954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004958:	931a      	str	r3, [sp, #104]	@ 0x68
 800495a:	4654      	mov	r4, sl
 800495c:	2205      	movs	r2, #5
 800495e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004962:	4853      	ldr	r0, [pc, #332]	@ (8004ab0 <_vfiprintf_r+0x21c>)
 8004964:	f000 fb18 	bl	8004f98 <memchr>
 8004968:	9a04      	ldr	r2, [sp, #16]
 800496a:	b9d8      	cbnz	r0, 80049a4 <_vfiprintf_r+0x110>
 800496c:	06d1      	lsls	r1, r2, #27
 800496e:	bf44      	itt	mi
 8004970:	2320      	movmi	r3, #32
 8004972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004976:	0713      	lsls	r3, r2, #28
 8004978:	bf44      	itt	mi
 800497a:	232b      	movmi	r3, #43	@ 0x2b
 800497c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004980:	f89a 3000 	ldrb.w	r3, [sl]
 8004984:	2b2a      	cmp	r3, #42	@ 0x2a
 8004986:	d015      	beq.n	80049b4 <_vfiprintf_r+0x120>
 8004988:	4654      	mov	r4, sl
 800498a:	2000      	movs	r0, #0
 800498c:	f04f 0c0a 	mov.w	ip, #10
 8004990:	9a07      	ldr	r2, [sp, #28]
 8004992:	4621      	mov	r1, r4
 8004994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004998:	3b30      	subs	r3, #48	@ 0x30
 800499a:	2b09      	cmp	r3, #9
 800499c:	d94b      	bls.n	8004a36 <_vfiprintf_r+0x1a2>
 800499e:	b1b0      	cbz	r0, 80049ce <_vfiprintf_r+0x13a>
 80049a0:	9207      	str	r2, [sp, #28]
 80049a2:	e014      	b.n	80049ce <_vfiprintf_r+0x13a>
 80049a4:	eba0 0308 	sub.w	r3, r0, r8
 80049a8:	fa09 f303 	lsl.w	r3, r9, r3
 80049ac:	4313      	orrs	r3, r2
 80049ae:	46a2      	mov	sl, r4
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	e7d2      	b.n	800495a <_vfiprintf_r+0xc6>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	1d19      	adds	r1, r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	9103      	str	r1, [sp, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bfbb      	ittet	lt
 80049c0:	425b      	neglt	r3, r3
 80049c2:	f042 0202 	orrlt.w	r2, r2, #2
 80049c6:	9307      	strge	r3, [sp, #28]
 80049c8:	9307      	strlt	r3, [sp, #28]
 80049ca:	bfb8      	it	lt
 80049cc:	9204      	strlt	r2, [sp, #16]
 80049ce:	7823      	ldrb	r3, [r4, #0]
 80049d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80049d2:	d10a      	bne.n	80049ea <_vfiprintf_r+0x156>
 80049d4:	7863      	ldrb	r3, [r4, #1]
 80049d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d8:	d132      	bne.n	8004a40 <_vfiprintf_r+0x1ac>
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	3402      	adds	r4, #2
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	9203      	str	r2, [sp, #12]
 80049e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049e8:	9305      	str	r3, [sp, #20]
 80049ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004ab4 <_vfiprintf_r+0x220>
 80049ee:	2203      	movs	r2, #3
 80049f0:	4650      	mov	r0, sl
 80049f2:	7821      	ldrb	r1, [r4, #0]
 80049f4:	f000 fad0 	bl	8004f98 <memchr>
 80049f8:	b138      	cbz	r0, 8004a0a <_vfiprintf_r+0x176>
 80049fa:	2240      	movs	r2, #64	@ 0x40
 80049fc:	9b04      	ldr	r3, [sp, #16]
 80049fe:	eba0 000a 	sub.w	r0, r0, sl
 8004a02:	4082      	lsls	r2, r0
 8004a04:	4313      	orrs	r3, r2
 8004a06:	3401      	adds	r4, #1
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0e:	2206      	movs	r2, #6
 8004a10:	4829      	ldr	r0, [pc, #164]	@ (8004ab8 <_vfiprintf_r+0x224>)
 8004a12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a16:	f000 fabf 	bl	8004f98 <memchr>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d03f      	beq.n	8004a9e <_vfiprintf_r+0x20a>
 8004a1e:	4b27      	ldr	r3, [pc, #156]	@ (8004abc <_vfiprintf_r+0x228>)
 8004a20:	bb1b      	cbnz	r3, 8004a6a <_vfiprintf_r+0x1d6>
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	3307      	adds	r3, #7
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	9303      	str	r3, [sp, #12]
 8004a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a30:	443b      	add	r3, r7
 8004a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a34:	e76a      	b.n	800490c <_vfiprintf_r+0x78>
 8004a36:	460c      	mov	r4, r1
 8004a38:	2001      	movs	r0, #1
 8004a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a3e:	e7a8      	b.n	8004992 <_vfiprintf_r+0xfe>
 8004a40:	2300      	movs	r3, #0
 8004a42:	f04f 0c0a 	mov.w	ip, #10
 8004a46:	4619      	mov	r1, r3
 8004a48:	3401      	adds	r4, #1
 8004a4a:	9305      	str	r3, [sp, #20]
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a52:	3a30      	subs	r2, #48	@ 0x30
 8004a54:	2a09      	cmp	r2, #9
 8004a56:	d903      	bls.n	8004a60 <_vfiprintf_r+0x1cc>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0c6      	beq.n	80049ea <_vfiprintf_r+0x156>
 8004a5c:	9105      	str	r1, [sp, #20]
 8004a5e:	e7c4      	b.n	80049ea <_vfiprintf_r+0x156>
 8004a60:	4604      	mov	r4, r0
 8004a62:	2301      	movs	r3, #1
 8004a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a68:	e7f0      	b.n	8004a4c <_vfiprintf_r+0x1b8>
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4630      	mov	r0, r6
 8004a72:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <_vfiprintf_r+0x22c>)
 8004a74:	a904      	add	r1, sp, #16
 8004a76:	f3af 8000 	nop.w
 8004a7a:	4607      	mov	r7, r0
 8004a7c:	1c78      	adds	r0, r7, #1
 8004a7e:	d1d6      	bne.n	8004a2e <_vfiprintf_r+0x19a>
 8004a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a82:	07d9      	lsls	r1, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_vfiprintf_r+0x1fe>
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	059a      	lsls	r2, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_vfiprintf_r+0x1fe>
 8004a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a8e:	f7ff fceb 	bl	8004468 <__retarget_lock_release_recursive>
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	065b      	lsls	r3, r3, #25
 8004a96:	f53f af1f 	bmi.w	80048d8 <_vfiprintf_r+0x44>
 8004a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a9c:	e71e      	b.n	80048dc <_vfiprintf_r+0x48>
 8004a9e:	ab03      	add	r3, sp, #12
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	462a      	mov	r2, r5
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <_vfiprintf_r+0x22c>)
 8004aa8:	a904      	add	r1, sp, #16
 8004aaa:	f000 f87d 	bl	8004ba8 <_printf_i>
 8004aae:	e7e4      	b.n	8004a7a <_vfiprintf_r+0x1e6>
 8004ab0:	080051bd 	.word	0x080051bd
 8004ab4:	080051c3 	.word	0x080051c3
 8004ab8:	080051c7 	.word	0x080051c7
 8004abc:	00000000 	.word	0x00000000
 8004ac0:	08004871 	.word	0x08004871

08004ac4 <_printf_common>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	4616      	mov	r6, r2
 8004aca:	4698      	mov	r8, r3
 8004acc:	688a      	ldr	r2, [r1, #8]
 8004ace:	690b      	ldr	r3, [r1, #16]
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfb8      	it	lt
 8004ad6:	4613      	movlt	r3, r2
 8004ad8:	6033      	str	r3, [r6, #0]
 8004ada:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ade:	460c      	mov	r4, r1
 8004ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ae4:	b10a      	cbz	r2, 8004aea <_printf_common+0x26>
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	6033      	str	r3, [r6, #0]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	0699      	lsls	r1, r3, #26
 8004aee:	bf42      	ittt	mi
 8004af0:	6833      	ldrmi	r3, [r6, #0]
 8004af2:	3302      	addmi	r3, #2
 8004af4:	6033      	strmi	r3, [r6, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	f015 0506 	ands.w	r5, r5, #6
 8004afc:	d106      	bne.n	8004b0c <_printf_common+0x48>
 8004afe:	f104 0a19 	add.w	sl, r4, #25
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	6832      	ldr	r2, [r6, #0]
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	dc2b      	bgt.n	8004b64 <_printf_common+0xa0>
 8004b0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	3b00      	subs	r3, #0
 8004b14:	bf18      	it	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	0692      	lsls	r2, r2, #26
 8004b1a:	d430      	bmi.n	8004b7e <_printf_common+0xba>
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b24:	47c8      	blx	r9
 8004b26:	3001      	adds	r0, #1
 8004b28:	d023      	beq.n	8004b72 <_printf_common+0xae>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	6922      	ldr	r2, [r4, #16]
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	bf14      	ite	ne
 8004b36:	2500      	movne	r5, #0
 8004b38:	6833      	ldreq	r3, [r6, #0]
 8004b3a:	f04f 0600 	mov.w	r6, #0
 8004b3e:	bf08      	it	eq
 8004b40:	68e5      	ldreq	r5, [r4, #12]
 8004b42:	f104 041a 	add.w	r4, r4, #26
 8004b46:	bf08      	it	eq
 8004b48:	1aed      	subeq	r5, r5, r3
 8004b4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b4e:	bf08      	it	eq
 8004b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b54:	4293      	cmp	r3, r2
 8004b56:	bfc4      	itt	gt
 8004b58:	1a9b      	subgt	r3, r3, r2
 8004b5a:	18ed      	addgt	r5, r5, r3
 8004b5c:	42b5      	cmp	r5, r6
 8004b5e:	d11a      	bne.n	8004b96 <_printf_common+0xd2>
 8004b60:	2000      	movs	r0, #0
 8004b62:	e008      	b.n	8004b76 <_printf_common+0xb2>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4652      	mov	r2, sl
 8004b68:	4641      	mov	r1, r8
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	47c8      	blx	r9
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d103      	bne.n	8004b7a <_printf_common+0xb6>
 8004b72:	f04f 30ff 	mov.w	r0, #4294967295
 8004b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	e7c1      	b.n	8004b02 <_printf_common+0x3e>
 8004b7e:	2030      	movs	r0, #48	@ 0x30
 8004b80:	18e1      	adds	r1, r4, r3
 8004b82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b8c:	4422      	add	r2, r4
 8004b8e:	3302      	adds	r3, #2
 8004b90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b94:	e7c2      	b.n	8004b1c <_printf_common+0x58>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4622      	mov	r2, r4
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	47c8      	blx	r9
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d0e6      	beq.n	8004b72 <_printf_common+0xae>
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7d9      	b.n	8004b5c <_printf_common+0x98>

08004ba8 <_printf_i>:
 8004ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	7e0f      	ldrb	r7, [r1, #24]
 8004bae:	4691      	mov	r9, r2
 8004bb0:	2f78      	cmp	r7, #120	@ 0x78
 8004bb2:	4680      	mov	r8, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	469a      	mov	sl, r3
 8004bb8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bbe:	d807      	bhi.n	8004bd0 <_printf_i+0x28>
 8004bc0:	2f62      	cmp	r7, #98	@ 0x62
 8004bc2:	d80a      	bhi.n	8004bda <_printf_i+0x32>
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	f000 80d3 	beq.w	8004d70 <_printf_i+0x1c8>
 8004bca:	2f58      	cmp	r7, #88	@ 0x58
 8004bcc:	f000 80ba 	beq.w	8004d44 <_printf_i+0x19c>
 8004bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bd8:	e03a      	b.n	8004c50 <_printf_i+0xa8>
 8004bda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bde:	2b15      	cmp	r3, #21
 8004be0:	d8f6      	bhi.n	8004bd0 <_printf_i+0x28>
 8004be2:	a101      	add	r1, pc, #4	@ (adr r1, 8004be8 <_printf_i+0x40>)
 8004be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004bd1 	.word	0x08004bd1
 8004bf4:	08004bd1 	.word	0x08004bd1
 8004bf8:	08004bd1 	.word	0x08004bd1
 8004bfc:	08004bd1 	.word	0x08004bd1
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004bd1 	.word	0x08004bd1
 8004c08:	08004bd1 	.word	0x08004bd1
 8004c0c:	08004bd1 	.word	0x08004bd1
 8004c10:	08004bd1 	.word	0x08004bd1
 8004c14:	08004d57 	.word	0x08004d57
 8004c18:	08004c7f 	.word	0x08004c7f
 8004c1c:	08004d11 	.word	0x08004d11
 8004c20:	08004bd1 	.word	0x08004bd1
 8004c24:	08004bd1 	.word	0x08004bd1
 8004c28:	08004d79 	.word	0x08004d79
 8004c2c:	08004bd1 	.word	0x08004bd1
 8004c30:	08004c7f 	.word	0x08004c7f
 8004c34:	08004bd1 	.word	0x08004bd1
 8004c38:	08004bd1 	.word	0x08004bd1
 8004c3c:	08004d19 	.word	0x08004d19
 8004c40:	6833      	ldr	r3, [r6, #0]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6032      	str	r2, [r6, #0]
 8004c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c50:	2301      	movs	r3, #1
 8004c52:	e09e      	b.n	8004d92 <_printf_i+0x1ea>
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	1d19      	adds	r1, r3, #4
 8004c5a:	6031      	str	r1, [r6, #0]
 8004c5c:	0606      	lsls	r6, r0, #24
 8004c5e:	d501      	bpl.n	8004c64 <_printf_i+0xbc>
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	e003      	b.n	8004c6c <_printf_i+0xc4>
 8004c64:	0645      	lsls	r5, r0, #25
 8004c66:	d5fb      	bpl.n	8004c60 <_printf_i+0xb8>
 8004c68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	da03      	bge.n	8004c78 <_printf_i+0xd0>
 8004c70:	232d      	movs	r3, #45	@ 0x2d
 8004c72:	426d      	negs	r5, r5
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c78:	230a      	movs	r3, #10
 8004c7a:	4859      	ldr	r0, [pc, #356]	@ (8004de0 <_printf_i+0x238>)
 8004c7c:	e011      	b.n	8004ca2 <_printf_i+0xfa>
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	0608      	lsls	r0, r1, #24
 8004c84:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c88:	d402      	bmi.n	8004c90 <_printf_i+0xe8>
 8004c8a:	0649      	lsls	r1, r1, #25
 8004c8c:	bf48      	it	mi
 8004c8e:	b2ad      	uxthmi	r5, r5
 8004c90:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c92:	6033      	str	r3, [r6, #0]
 8004c94:	bf14      	ite	ne
 8004c96:	230a      	movne	r3, #10
 8004c98:	2308      	moveq	r3, #8
 8004c9a:	4851      	ldr	r0, [pc, #324]	@ (8004de0 <_printf_i+0x238>)
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ca2:	6866      	ldr	r6, [r4, #4]
 8004ca4:	2e00      	cmp	r6, #0
 8004ca6:	bfa8      	it	ge
 8004ca8:	6821      	ldrge	r1, [r4, #0]
 8004caa:	60a6      	str	r6, [r4, #8]
 8004cac:	bfa4      	itt	ge
 8004cae:	f021 0104 	bicge.w	r1, r1, #4
 8004cb2:	6021      	strge	r1, [r4, #0]
 8004cb4:	b90d      	cbnz	r5, 8004cba <_printf_i+0x112>
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	d04b      	beq.n	8004d52 <_printf_i+0x1aa>
 8004cba:	4616      	mov	r6, r2
 8004cbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cc0:	fb03 5711 	mls	r7, r3, r1, r5
 8004cc4:	5dc7      	ldrb	r7, [r0, r7]
 8004cc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cca:	462f      	mov	r7, r5
 8004ccc:	42bb      	cmp	r3, r7
 8004cce:	460d      	mov	r5, r1
 8004cd0:	d9f4      	bls.n	8004cbc <_printf_i+0x114>
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d10b      	bne.n	8004cee <_printf_i+0x146>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	07df      	lsls	r7, r3, #31
 8004cda:	d508      	bpl.n	8004cee <_printf_i+0x146>
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	6861      	ldr	r1, [r4, #4]
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	bfde      	ittt	le
 8004ce4:	2330      	movle	r3, #48	@ 0x30
 8004ce6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cee:	1b92      	subs	r2, r2, r6
 8004cf0:	6122      	str	r2, [r4, #16]
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f8cd a000 	str.w	sl, [sp]
 8004cfc:	aa03      	add	r2, sp, #12
 8004cfe:	f7ff fee1 	bl	8004ac4 <_printf_common>
 8004d02:	3001      	adds	r0, #1
 8004d04:	d14a      	bne.n	8004d9c <_printf_i+0x1f4>
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0a:	b004      	add	sp, #16
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	f043 0320 	orr.w	r3, r3, #32
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	2778      	movs	r7, #120	@ 0x78
 8004d1a:	4832      	ldr	r0, [pc, #200]	@ (8004de4 <_printf_i+0x23c>)
 8004d1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	6831      	ldr	r1, [r6, #0]
 8004d24:	061f      	lsls	r7, r3, #24
 8004d26:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d2a:	d402      	bmi.n	8004d32 <_printf_i+0x18a>
 8004d2c:	065f      	lsls	r7, r3, #25
 8004d2e:	bf48      	it	mi
 8004d30:	b2ad      	uxthmi	r5, r5
 8004d32:	6031      	str	r1, [r6, #0]
 8004d34:	07d9      	lsls	r1, r3, #31
 8004d36:	bf44      	itt	mi
 8004d38:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3c:	6023      	strmi	r3, [r4, #0]
 8004d3e:	b11d      	cbz	r5, 8004d48 <_printf_i+0x1a0>
 8004d40:	2310      	movs	r3, #16
 8004d42:	e7ab      	b.n	8004c9c <_printf_i+0xf4>
 8004d44:	4826      	ldr	r0, [pc, #152]	@ (8004de0 <_printf_i+0x238>)
 8004d46:	e7e9      	b.n	8004d1c <_printf_i+0x174>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	f023 0320 	bic.w	r3, r3, #32
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	e7f6      	b.n	8004d40 <_printf_i+0x198>
 8004d52:	4616      	mov	r6, r2
 8004d54:	e7bd      	b.n	8004cd2 <_printf_i+0x12a>
 8004d56:	6833      	ldr	r3, [r6, #0]
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	1d18      	adds	r0, r3, #4
 8004d5c:	6961      	ldr	r1, [r4, #20]
 8004d5e:	6030      	str	r0, [r6, #0]
 8004d60:	062e      	lsls	r6, r5, #24
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	d501      	bpl.n	8004d6a <_printf_i+0x1c2>
 8004d66:	6019      	str	r1, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <_printf_i+0x1c8>
 8004d6a:	0668      	lsls	r0, r5, #25
 8004d6c:	d5fb      	bpl.n	8004d66 <_printf_i+0x1be>
 8004d6e:	8019      	strh	r1, [r3, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	4616      	mov	r6, r2
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	e7bc      	b.n	8004cf2 <_printf_i+0x14a>
 8004d78:	6833      	ldr	r3, [r6, #0]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	6032      	str	r2, [r6, #0]
 8004d80:	681e      	ldr	r6, [r3, #0]
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f907 	bl	8004f98 <memchr>
 8004d8a:	b108      	cbz	r0, 8004d90 <_printf_i+0x1e8>
 8004d8c:	1b80      	subs	r0, r0, r6
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	2300      	movs	r3, #0
 8004d96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d9a:	e7aa      	b.n	8004cf2 <_printf_i+0x14a>
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4640      	mov	r0, r8
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	47d0      	blx	sl
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0ad      	beq.n	8004d06 <_printf_i+0x15e>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	079b      	lsls	r3, r3, #30
 8004dae:	d413      	bmi.n	8004dd8 <_printf_i+0x230>
 8004db0:	68e0      	ldr	r0, [r4, #12]
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	4298      	cmp	r0, r3
 8004db6:	bfb8      	it	lt
 8004db8:	4618      	movlt	r0, r3
 8004dba:	e7a6      	b.n	8004d0a <_printf_i+0x162>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4632      	mov	r2, r6
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	47d0      	blx	sl
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d09d      	beq.n	8004d06 <_printf_i+0x15e>
 8004dca:	3501      	adds	r5, #1
 8004dcc:	68e3      	ldr	r3, [r4, #12]
 8004dce:	9903      	ldr	r1, [sp, #12]
 8004dd0:	1a5b      	subs	r3, r3, r1
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	dcf2      	bgt.n	8004dbc <_printf_i+0x214>
 8004dd6:	e7eb      	b.n	8004db0 <_printf_i+0x208>
 8004dd8:	2500      	movs	r5, #0
 8004dda:	f104 0619 	add.w	r6, r4, #25
 8004dde:	e7f5      	b.n	8004dcc <_printf_i+0x224>
 8004de0:	080051ce 	.word	0x080051ce
 8004de4:	080051df 	.word	0x080051df

08004de8 <__swbuf_r>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	460e      	mov	r6, r1
 8004dec:	4614      	mov	r4, r2
 8004dee:	4605      	mov	r5, r0
 8004df0:	b118      	cbz	r0, 8004dfa <__swbuf_r+0x12>
 8004df2:	6a03      	ldr	r3, [r0, #32]
 8004df4:	b90b      	cbnz	r3, 8004dfa <__swbuf_r+0x12>
 8004df6:	f7ff fa43 	bl	8004280 <__sinit>
 8004dfa:	69a3      	ldr	r3, [r4, #24]
 8004dfc:	60a3      	str	r3, [r4, #8]
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	071a      	lsls	r2, r3, #28
 8004e02:	d501      	bpl.n	8004e08 <__swbuf_r+0x20>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	b943      	cbnz	r3, 8004e1a <__swbuf_r+0x32>
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 f82a 	bl	8004e64 <__swsetup_r>
 8004e10:	b118      	cbz	r0, 8004e1a <__swbuf_r+0x32>
 8004e12:	f04f 37ff 	mov.w	r7, #4294967295
 8004e16:	4638      	mov	r0, r7
 8004e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	6922      	ldr	r2, [r4, #16]
 8004e1e:	b2f6      	uxtb	r6, r6
 8004e20:	1a98      	subs	r0, r3, r2
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	4637      	mov	r7, r6
 8004e26:	4283      	cmp	r3, r0
 8004e28:	dc05      	bgt.n	8004e36 <__swbuf_r+0x4e>
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f7ff fcb9 	bl	80047a4 <_fflush_r>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d1ed      	bne.n	8004e12 <__swbuf_r+0x2a>
 8004e36:	68a3      	ldr	r3, [r4, #8]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60a3      	str	r3, [r4, #8]
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	6022      	str	r2, [r4, #0]
 8004e42:	701e      	strb	r6, [r3, #0]
 8004e44:	6962      	ldr	r2, [r4, #20]
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d004      	beq.n	8004e56 <__swbuf_r+0x6e>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	07db      	lsls	r3, r3, #31
 8004e50:	d5e1      	bpl.n	8004e16 <__swbuf_r+0x2e>
 8004e52:	2e0a      	cmp	r6, #10
 8004e54:	d1df      	bne.n	8004e16 <__swbuf_r+0x2e>
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f7ff fca3 	bl	80047a4 <_fflush_r>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d0d9      	beq.n	8004e16 <__swbuf_r+0x2e>
 8004e62:	e7d6      	b.n	8004e12 <__swbuf_r+0x2a>

08004e64 <__swsetup_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4b29      	ldr	r3, [pc, #164]	@ (8004f0c <__swsetup_r+0xa8>)
 8004e68:	4605      	mov	r5, r0
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	b118      	cbz	r0, 8004e78 <__swsetup_r+0x14>
 8004e70:	6a03      	ldr	r3, [r0, #32]
 8004e72:	b90b      	cbnz	r3, 8004e78 <__swsetup_r+0x14>
 8004e74:	f7ff fa04 	bl	8004280 <__sinit>
 8004e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7c:	0719      	lsls	r1, r3, #28
 8004e7e:	d422      	bmi.n	8004ec6 <__swsetup_r+0x62>
 8004e80:	06da      	lsls	r2, r3, #27
 8004e82:	d407      	bmi.n	8004e94 <__swsetup_r+0x30>
 8004e84:	2209      	movs	r2, #9
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	e033      	b.n	8004efc <__swsetup_r+0x98>
 8004e94:	0758      	lsls	r0, r3, #29
 8004e96:	d512      	bpl.n	8004ebe <__swsetup_r+0x5a>
 8004e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e9a:	b141      	cbz	r1, 8004eae <__swsetup_r+0x4a>
 8004e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d002      	beq.n	8004eaa <__swsetup_r+0x46>
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7ff faff 	bl	80044a8 <_free_r>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f043 0308 	orr.w	r3, r3, #8
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	b94b      	cbnz	r3, 8004ede <__swsetup_r+0x7a>
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed4:	d003      	beq.n	8004ede <__swsetup_r+0x7a>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 f890 	bl	8004ffe <__smakebuf_r>
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	f013 0201 	ands.w	r2, r3, #1
 8004ee6:	d00a      	beq.n	8004efe <__swsetup_r+0x9a>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60a2      	str	r2, [r4, #8]
 8004eec:	6962      	ldr	r2, [r4, #20]
 8004eee:	4252      	negs	r2, r2
 8004ef0:	61a2      	str	r2, [r4, #24]
 8004ef2:	6922      	ldr	r2, [r4, #16]
 8004ef4:	b942      	cbnz	r2, 8004f08 <__swsetup_r+0xa4>
 8004ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004efa:	d1c5      	bne.n	8004e88 <__swsetup_r+0x24>
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	0799      	lsls	r1, r3, #30
 8004f00:	bf58      	it	pl
 8004f02:	6962      	ldrpl	r2, [r4, #20]
 8004f04:	60a2      	str	r2, [r4, #8]
 8004f06:	e7f4      	b.n	8004ef2 <__swsetup_r+0x8e>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	e7f7      	b.n	8004efc <__swsetup_r+0x98>
 8004f0c:	20000020 	.word	0x20000020

08004f10 <_raise_r>:
 8004f10:	291f      	cmp	r1, #31
 8004f12:	b538      	push	{r3, r4, r5, lr}
 8004f14:	4605      	mov	r5, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	d904      	bls.n	8004f24 <_raise_r+0x14>
 8004f1a:	2316      	movs	r3, #22
 8004f1c:	6003      	str	r3, [r0, #0]
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004f26:	b112      	cbz	r2, 8004f2e <_raise_r+0x1e>
 8004f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f2c:	b94b      	cbnz	r3, 8004f42 <_raise_r+0x32>
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f000 f830 	bl	8004f94 <_getpid_r>
 8004f34:	4622      	mov	r2, r4
 8004f36:	4601      	mov	r1, r0
 8004f38:	4628      	mov	r0, r5
 8004f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f3e:	f000 b817 	b.w	8004f70 <_kill_r>
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d00a      	beq.n	8004f5c <_raise_r+0x4c>
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	d103      	bne.n	8004f52 <_raise_r+0x42>
 8004f4a:	2316      	movs	r3, #22
 8004f4c:	6003      	str	r3, [r0, #0]
 8004f4e:	2001      	movs	r0, #1
 8004f50:	e7e7      	b.n	8004f22 <_raise_r+0x12>
 8004f52:	2100      	movs	r1, #0
 8004f54:	4620      	mov	r0, r4
 8004f56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004f5a:	4798      	blx	r3
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e7e0      	b.n	8004f22 <_raise_r+0x12>

08004f60 <raise>:
 8004f60:	4b02      	ldr	r3, [pc, #8]	@ (8004f6c <raise+0xc>)
 8004f62:	4601      	mov	r1, r0
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	f7ff bfd3 	b.w	8004f10 <_raise_r>
 8004f6a:	bf00      	nop
 8004f6c:	20000020 	.word	0x20000020

08004f70 <_kill_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	2300      	movs	r3, #0
 8004f74:	4d06      	ldr	r5, [pc, #24]	@ (8004f90 <_kill_r+0x20>)
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	f7fc fcfa 	bl	8001976 <_kill>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d102      	bne.n	8004f8c <_kill_r+0x1c>
 8004f86:	682b      	ldr	r3, [r5, #0]
 8004f88:	b103      	cbz	r3, 8004f8c <_kill_r+0x1c>
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	bd38      	pop	{r3, r4, r5, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000358 	.word	0x20000358

08004f94 <_getpid_r>:
 8004f94:	f7fc bce8 	b.w	8001968 <_getpid>

08004f98 <memchr>:
 8004f98:	4603      	mov	r3, r0
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	b2c9      	uxtb	r1, r1
 8004f9e:	4402      	add	r2, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	d101      	bne.n	8004faa <memchr+0x12>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e003      	b.n	8004fb2 <memchr+0x1a>
 8004faa:	7804      	ldrb	r4, [r0, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	428c      	cmp	r4, r1
 8004fb0:	d1f6      	bne.n	8004fa0 <memchr+0x8>
 8004fb2:	bd10      	pop	{r4, pc}

08004fb4 <__swhatbuf_r>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbc:	4615      	mov	r5, r2
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	461e      	mov	r6, r3
 8004fc2:	b096      	sub	sp, #88	@ 0x58
 8004fc4:	da0c      	bge.n	8004fe0 <__swhatbuf_r+0x2c>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	2100      	movs	r1, #0
 8004fca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fce:	bf14      	ite	ne
 8004fd0:	2340      	movne	r3, #64	@ 0x40
 8004fd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	6031      	str	r1, [r6, #0]
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	b016      	add	sp, #88	@ 0x58
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	466a      	mov	r2, sp
 8004fe2:	f000 f849 	bl	8005078 <_fstat_r>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	dbed      	blt.n	8004fc6 <__swhatbuf_r+0x12>
 8004fea:	9901      	ldr	r1, [sp, #4]
 8004fec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ff0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ff4:	4259      	negs	r1, r3
 8004ff6:	4159      	adcs	r1, r3
 8004ff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ffc:	e7eb      	b.n	8004fd6 <__swhatbuf_r+0x22>

08004ffe <__smakebuf_r>:
 8004ffe:	898b      	ldrh	r3, [r1, #12]
 8005000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005002:	079d      	lsls	r5, r3, #30
 8005004:	4606      	mov	r6, r0
 8005006:	460c      	mov	r4, r1
 8005008:	d507      	bpl.n	800501a <__smakebuf_r+0x1c>
 800500a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	2301      	movs	r3, #1
 8005014:	6163      	str	r3, [r4, #20]
 8005016:	b003      	add	sp, #12
 8005018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800501a:	466a      	mov	r2, sp
 800501c:	ab01      	add	r3, sp, #4
 800501e:	f7ff ffc9 	bl	8004fb4 <__swhatbuf_r>
 8005022:	9f00      	ldr	r7, [sp, #0]
 8005024:	4605      	mov	r5, r0
 8005026:	4639      	mov	r1, r7
 8005028:	4630      	mov	r0, r6
 800502a:	f7ff faaf 	bl	800458c <_malloc_r>
 800502e:	b948      	cbnz	r0, 8005044 <__smakebuf_r+0x46>
 8005030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005034:	059a      	lsls	r2, r3, #22
 8005036:	d4ee      	bmi.n	8005016 <__smakebuf_r+0x18>
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	e7e2      	b.n	800500a <__smakebuf_r+0xc>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800504a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	9b01      	ldr	r3, [sp, #4]
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	b15b      	cbz	r3, 800506e <__smakebuf_r+0x70>
 8005056:	4630      	mov	r0, r6
 8005058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800505c:	f000 f81e 	bl	800509c <_isatty_r>
 8005060:	b128      	cbz	r0, 800506e <__smakebuf_r+0x70>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	431d      	orrs	r5, r3
 8005072:	81a5      	strh	r5, [r4, #12]
 8005074:	e7cf      	b.n	8005016 <__smakebuf_r+0x18>
	...

08005078 <_fstat_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	2300      	movs	r3, #0
 800507c:	4d06      	ldr	r5, [pc, #24]	@ (8005098 <_fstat_r+0x20>)
 800507e:	4604      	mov	r4, r0
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	f7fc fcd5 	bl	8001a34 <_fstat>
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	d102      	bne.n	8005094 <_fstat_r+0x1c>
 800508e:	682b      	ldr	r3, [r5, #0]
 8005090:	b103      	cbz	r3, 8005094 <_fstat_r+0x1c>
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	20000358 	.word	0x20000358

0800509c <_isatty_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	2300      	movs	r3, #0
 80050a0:	4d05      	ldr	r5, [pc, #20]	@ (80050b8 <_isatty_r+0x1c>)
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	f7fc fcd3 	bl	8001a52 <_isatty>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_isatty_r+0x1a>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_isatty_r+0x1a>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20000358 	.word	0x20000358

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
